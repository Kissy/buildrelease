<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head>
 	<title>Scripting Languages: PHP, Perl, Python, Ruby - Hyperpolyglot</title>
 	
    	<script src="scripting_files/quant.js" async="" type="text/javascript"></script><script src="scripting_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript" src="scripting_files/login__CustomDomainScript.htm"></script>

 		
 	<script type="text/javascript" src="scripting_files/init.js"></script>
 	<script type="text/javascript">
 		var URL_HOST = 'www.wikidot.com';
		var URL_DOMAIN = 'wikidot.com';
		var USE_SSL =  true ;
 		// global request information
 		
 		var WIKIREQUEST = {};
 		WIKIREQUEST.info = {};
 		
 		WIKIREQUEST.info.domain = "hyperpolyglot.org";
 		WIKIREQUEST.info.siteId = 143855;
 		WIKIREQUEST.info.categoryId = 799202;
 		WIKIREQUEST.info.themeId = 20638;
 		WIKIREQUEST.info.requestPageName = "scripting";
 		OZONE.request.timestamp = 1306300138;
 		OZONE.request.date = new Date();
 		WIKIREQUEST.info.lang = 'en';
 		 		WIKIREQUEST.info.pageUnixName = "scripting";
 		WIKIREQUEST.info.pageId = 5050998;
 				 		WIKIREQUEST.info.lang = "en";
 		OZONE.lang = "en";
// 		window.onload = WikidotInit();
 	</script>
 	
 	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        	 		 		<meta name="google-site-verification" content="On-Wdixlcxk0xhc48yAp8GZt5mBF0CvIIUelO_cjOJs">
	 			 	 	 	<meta http-equiv="content-language" content="en">
	<script type="text/javascript" src="scripting_files/WIKIDOT.js"></script>
	
   	<style type="text/css" id="internal-style">

        /* modules */
@import url(http://d3g0gp89917ko0.cloudfront.net/v--cd3026ca6e54/common--modules/css/monetize/textlinkads/MonetizeTextLinkAdsModule.css);



        /* theme */
   		   			@import url(http://d3g0gp89917ko0.cloudfront.net/v--cd3026ca6e54/common--theme/base/css/style.css);
   		   			@import url(http://d3g0gp89917ko0.cloudfront.net/v--cd3026ca6e54/common--theme/clean/css/style.css);
   		   			@import url(/local--theme/custom-clean/style.css);
   		
    </style>
    
    <link rel="shortcut icon" href="http://hyperpolyglot.org/local--favicon/favicon.gif">
    <link rel="icon" type="image/gif" href="http://hyperpolyglot.org/local--favicon/favicon.gif">
    
            <link rel="alternate" type="application/wiki" title="Edit this page" href="javascript:WIKIDOT.page.listeners.editClick()">
    
    <script type="text/javascript">
      window.google_analytics_uacct = 'UA-18234656-1';
      window.google_analytics_domain_name = 'none';
    </script>
</head>

  <body id="html-body">
  <a name="page-top"></a>
  
  <div id="container-wrap-wrap">
	<div id="container-wrap">
		<div id="container">
		  	<div id="header">
		  	  <h1><a href="http://hyperpolyglot.org/"><span>Hyperpolyglot</span></a></h1>
		  				  		
		  		<!-- google_ad_section_start(weight=ignore) -->
		  		
		  		<div id="search-top-box">
		  			<form id="search-top-box-form" action="dummy">
			  			<input id="search-top-box-input" class="text empty" size="15" name="query" value="Search this site" onfocus="if(YAHOO.util.Dom.hasClass(this, 'empty')){YAHOO.util.Dom.removeClass(this,'empty'); this.value='';}" type="text"><input class="button" name="search" value="Search" type="submit">
				 	</form>
	  			</div>
		  		
		  					  		<div id="top-bar">
			  			

<ul><li><a href="javascript:;">languages
</a><ul><li style="list-style: none; display: inline"><ul><li><a href="http://hyperpolyglot.org/pascal">Ada</a></li><li><a href="http://hyperpolyglot.org/shell">AppleScript</a></li><li><a href="http://hyperpolyglot.org/shell">Bash</a></li><li><a href="http://hyperpolyglot.org/c">C, C++, C#</a></li><li><a href="http://hyperpolyglot.org/logic">Erlang</a></li><li><a href="http://hyperpolyglot.org/stack">Factor</a></li><li><a href="http://hyperpolyglot.org/stack">Forth</a></li><li><a href="http://hyperpolyglot.org/ml">Haskell</a></li><li><a href="http://hyperpolyglot.org/embeddable">Io</a></li><li><a href="http://hyperpolyglot.org/c">Java</a></li><li><a href="http://hyperpolyglot.org/embeddable">JavaScript</a></li><li><a href="http://hyperpolyglot.org/lisp">Lisp Dialects</a></li><li><a href="http://hyperpolyglot.org/embeddable">Lua</a></li><li><a href="http://hyperpolyglot.org/computer-algebra">Mathematica</a></li><li><a href="http://hyperpolyglot.org/numerical-analysis">MATLAB</a></li><li><a href="http://hyperpolyglot.org/c">Objective C</a></li><li><a href="http://hyperpolyglot.org/ml">OCaml</a></li><li><a href="http://hyperpolyglot.org/logic">Oz</a></li><li><a href="http://hyperpolyglot.org/pascal">Pascal</a></li><li><a class="current-link" href="http://hyperpolyglot.org/scripting">Perl</a></li><li><a class="current-link" href="http://hyperpolyglot.org/scripting">PHP</a></li><li><a href="http://hyperpolyglot.org/stack">PostScript</a></li><li><a href="http://hyperpolyglot.org/logic">Prolog</a></li><li><a class="current-link" href="http://hyperpolyglot.org/scripting">Python</a></li><li><a href="http://hyperpolyglot.org/shell">PowerShell</a></li><li><a href="http://hyperpolyglot.org/numerical-analysis">R</a></li><li><a class="current-link" href="http://hyperpolyglot.org/scripting">Ruby</a></li><li><a href="http://hyperpolyglot.org/ml">Scala</a></li><li><a href="http://hyperpolyglot.org/pascal">SQL Extensions</a></li><li><a href="http://hyperpolyglot.org/ml">Standard ML</a></li><li><a href="http://hyperpolyglot.org/embeddable">Tcl</a></li><li><a href="http://hyperpolyglot.org/shell">Zsh</a></li></ul></li></ul></li></ul>

			  		</div>
		  				  		<div id="login-status"><a href="javascript:;" onclick="WIKIDOT.page.listeners.createAccount(event)" class="login-status-create-account">Create account</a> <span>or</span> <a href="javascript:;" onclick="WIKIDOT.page.listeners.loginClick(event)" class="login-status-sign-in">Sign in</a> </div>
		  		<div id="header-extra-div-1"><span></span></div><div id="header-extra-div-2"><span></span></div><div id="header-extra-div-3"><span></span></div>
		  	</div>
		  	
			<div id="content-wrap">
								
				<!-- google_ad_section_end -->
				
				<div id="main-content">
					<div id="action-area-top"></div>
					
					<!-- google_ad_section_start -->
					    					    					<div id="page-title">
    					Scripting Languages: PHP, Perl, Python, Ruby    					</div>
    					    					                    
					
    					    					

    										
    					<div id="page-content">
						    
    						    						
    						

<p><em>A side-by-side reference sheet; there is also a <a href="http://hyperpolyglot.org/embeddable">reference sheet for Tcl, Lua, JavaScript, Io</a></em></p>
<p><a href="#arithmetic-logic">arithmetic and logic</a> | <a href="#strings">strings</a> | <a href="#containers">containers</a> | <a href="#functions">functions</a> | <a href="#execution-control">execution control</a> | <a href="#environment-and-io">environment and i/o</a> | <a href="#libraries-modules">libraries and modules</a> | <a href="#objects">objects</a> | <a href="#reflection-and-hooks">reflection and hooks</a> | <a href="#web">web</a> | <a href="#web-framework">web framework</a> | <a href="#java-interoperation">java interop</a> | <a href="#history">history</a><a name="general"></a> | <a class="wiki-standalone-button" style="background-color: rgb(239, 239, 239); padding-bottom: 1px; padding-left: 5px; padding-right: 5px;" href="javascript:;" onclick="WIKIDOT.page.listeners.editClick(event)">edit</a><br></p>
<table class="wiki-content-table">
<tbody><tr>
<th></th>
<th><a href="#php">php</a> (1995)</th>
<th><a href="#perl">perl</a> (1987)</th>
<th><a href="#python">python</a> (1991)</th>
<th><a href="#ruby">ruby</a> (1995)</th>
</tr>
<tr>
<td><a href="#version-used">versions used</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>5.3.1</em></span></td>
<td><span style="color: gray"><em>5.10.0; 5.12.1</em></span></td>
<td><span style="color: gray"><em>2.6.1; 3.1.1</em></span></td>
<td><span style="color: gray"><em>1.8.7; 1.9.1</em></span></td>
</tr>
<tr>
<td><a href="#version">show version</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$ php <span style="white-space: pre-wrap;">--</span>version</td>
<td>$ perl <span style="white-space: pre-wrap;">--</span>version</td>
<td>$ python -V</td>
<td>$ ruby <span style="white-space: pre-wrap;">--</span>version</td>
</tr>
<tr>
<td><a href="#interpreter">interpreter</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$ php -f foo.php</td>
<td>$ perl foo.pl</td>
<td>$ python foo.py</td>
<td>$ ruby foo.rb</td>
</tr>
<tr>
<td><a href="#repl">repl</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$ php -a</td>
<td>$ perl -de 0</td>
<td>$ python</td>
<td>$ irb</td>
</tr>
<tr>
<td><a href="#check-syntax">check syntax</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$ php -l foo.php</td>
<td>$ perl -c foo.pl</td>
<td><span style="color: #b22222"># precompile to bytecode:</span><br>
<span style="color: purple">import</span> py_compile<br>
py_compile.compile("foo.py")</td>
<td>$ ruby -c foo.rb</td>
</tr>
<tr>
<td><a href="#warnings-flag">flags for stronger and strongest warnings</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$ perl -w foo.pl<br>
$ perl -W foo.pl</td>
<td>$ python -t foo.py<br>
$ python -3t foo.py</td>
<td>$ ruby -w foo.pl<br>
$ ruby -W2 foo.pl</td>
</tr>
<tr>
<td><a href="#statement-separator">statement separator</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>;</td>
<td>;</td>
<td>; <span style="color: #b22222"># or sometimes newline</span></td>
<td>; <span style="color: #b22222"># or sometimes newline</span></td>
</tr>
<tr>
<td><a href="#block-delimiters">block delimiters</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>{}</td>
<td>{}</td>
<td><span style="color: gray"><em>offside rule</em></span></td>
<td>{}<br>
<span style="color: purple">do end</span></td>
</tr>
<tr>
<td><a href="#assignment">assignment</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> = 1;</td>
<td>$a = 1;</td>
<td><span style="color: #b22222"># does not return a value:</span><br>
<span style="color: #cd853f">a</span> = 1</td>
<td>a = 1</td>
</tr>
<tr>
<td><a href="#parallel-assignment">parallel assignment</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>list($<span style="color: #cd853f">a</span>, $<span style="color: #cd853f">b</span>, $<span style="color: #cd853f">c</span>) = array(1 ,2, 3);<br>
<span style="color: #b22222"># 3 is ignored:</span><br>
list($<span style="color: #cd853f">a</span>, $<span style="color: #cd853f">b</span>) = array(1, 2, 3);<br>
<span style="color: #b22222"># $c set to NULL:</span><br>
list($<span style="color: #cd853f">a</span>, $<span style="color: #cd853f">b</span>, $<span style="color: #cd853f">c</span>) = array(1, 2);</td>
<td>($a, $b, $c) = (1, 2, 3);<br>
<span style="color: #b22222"># 3 is ignored:</span><br>
($a, $b) = (1, 2, 3);<br>
<span style="color: #b22222"># $c set to undef:</span><br>
($a, $b, $c) = (1, 2);</td>
<td><span style="color: #cd853f">a</span>, <span style="color: #cd853f">b</span>, <span style="color: #cd853f">c</span> = 1, 2, 3<br>
<span style="color: #b22222"># raises ValueError:</span><br>
<span style="color: #cd853f">a</span>, <span style="color: #cd853f">b</span> = 1, 2, 3<br>
<span style="color: #b22222"># raises ValueError:</span><br>
<span style="color: #cd853f">a</span>, <span style="color: #cd853f">b</span>, <span style="color: #cd853f">c</span> = 1, 2</td>
<td>a, b, c = 1, 2, 3<br>
<span style="color: #b22222"># 3 is ignored:</span><br>
a, b = 1, 2, 3<br>
<span style="color: #b22222"># c set to nil:</span><br>
a, b, c = 1, 2</td>
</tr>
<tr>
<td><a href="#swap">swap</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>list($<span style="color: #cd853f">a</span>, $<span style="color: #cd853f">b</span>) = array($b, $a);</td>
<td>($a, $b) = ($b, $a);</td>
<td><span style="color: #cd853f">a</span>, <span style="color: #cd853f">b</span> = b, a</td>
<td>a, b = b, a</td>
</tr>
<tr>
<td><a href="#compound-assignment">compound assignment operators: arithmetic, string, logical, bit</a></td>
<td>+= -= *= <span style="color: gray"><em>none</em></span> /= %= <span style="white-space: pre-wrap;">**</span>=<br>
.= <span style="color: gray"><em>none</em></span><br>
&amp;= |= <span style="color: gray"><em>none</em></span><br>
<span style="white-space: pre-wrap;"> &lt;&lt;= &gt;&gt;= </span> &amp;= |= ^=</td>
<td>+= -= *= <span style="color: gray"><em>none</em></span> /= %= <span style="white-space: pre-wrap;">**</span>=<br>
.= x=<br>
&amp;&amp;= <span style="white-space: pre-wrap;">||</span>= ^=<br>
<span style="white-space: pre-wrap;"> &lt;&lt;= &gt;&gt;= </span> &amp;= |= ^=</td>
<td><span style="color: #b22222"># do not return values:</span><br>
+= -= *= /= <span style="white-space: pre-wrap;">//</span>= %= <span style="white-space: pre-wrap;">**</span>=<br>
+= *=<br>
&amp;= <span style="white-space: pre-wrap;">|</span>= ^=<br>
<span style="white-space: pre-wrap;"> &lt;&lt;= &gt;&gt;= </span> &amp;= |= ^=</td>
<td>+= -= *= /= <span style="color: gray"><em>none</em></span> %= <span style="white-space: pre-wrap;">**</span>=<br>
+= *=<br>
&amp;&amp;= <span style="white-space: pre-wrap;">||</span>= ^=<br>
<span style="white-space: pre-wrap;"> &lt;&lt;= &gt;&gt;= </span> &amp;= |= ^=</td>
</tr>
<tr>
<td><a href="#increment-decrement">increment and decrement</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">x</span> = 1;<br>
++$<span style="color: #cd853f">x</span>;<br>
<span style="white-space: pre-wrap;">--</span>$<span style="color: #cd853f">x</span>;</td>
<td>$x = 1;<br>
++$x;<br>
<span style="white-space: pre-wrap;">--</span>$x;</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: #b22222"># x not mutated:</span><br>
x = 1<br>
x.succ<br>
x.pred</td>
</tr>
<tr>
<td><a href="#local-variable">local variable declarations</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: #b22222"># in function body:</span><br>
$<span style="color: #cd853f">a</span> = <span style="color: teal">NULL</span>;<br>
$<span style="color: #cd853f">b</span> = array();<br>
$<span style="color: #cd853f">c</span> = array();<br>
$<span style="color: #cd853f">d</span> = 1;<br>
list($<span style="color: #cd853f">e</span>, $<span style="color: #cd853f">f</span>) = array(2, 3);</td>
<td><span style="color: purple">my</span> <span style="color: #cd853f">$a</span>;<br>
<span style="color: purple">my</span> (<span style="color: teal">@b</span>, <span style="color: teal">%c</span>);<br>
<span style="color: purple">my</span> <span style="color: #cd853f">$d</span> = 1;<br>
<span style="color: purple">my</span> (<span style="color: #cd853f">$e</span>, <span style="color: #cd853f">$f</span>) = (2, 3);</td>
<td><span style="color: #b22222"># in function body:</span><br>
<span style="color: #cd853f">a</span> = <span style="color: teal">None</span><br>
<span style="color: #cd853f">b</span>, <span style="color: #cd853f">c</span> = [], {}<br>
<span style="color: #cd853f">d</span> = 1<br>
<span style="color: #cd853f">e</span>, <span style="color: #cd853f">f</span> = 2, 3</td>
<td>a = <span style="color: #cd853f">nil</span><br>
b, c = [], {}<br>
d = 1<br>
e, f = 2, 3</td>
</tr>
<tr>
<td><a href="#scope-regions">regions which define local scope</a></td>
<td><span style="color: gray"><em>top level:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>function or method body<br>
<br>
nestable (with use clause):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>anonymous function body</em></span></td>
<td><span style="color: gray"><em>top level:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>file<br>
<br>
nestable:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>function body<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>anonymous function body<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>anonymous block</em></span></td>
<td><span style="color: gray"><em>nestable (read only):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>function or method body</em></span></td>
<td><span style="color: gray"><em>top level:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>file<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>class block<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>module block<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>method body<br>
<br>
nestable:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>anonymous function block<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>anonymous block</em></span></td>
</tr>
<tr>
<td><a href="#global-variable">global variable</a></td>
<td>list($<span style="color: #cd853f">g</span>, $<span style="color: #cd853f">h</span>) = array(7, 8);<br>
<span style="color: purple">function</span> <span style="color: #0000cd">swap_globals</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">global</span> $<span style="color: #cd853f">g</span>, $<span style="color: #cd853f">h</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>list($<span style="color: #cd853f">g</span>, $<span style="color: #cd853f">h</span>) = array($<span style="color: #cd853f">h</span>, $<span style="color: #cd853f">g</span>);<br>
}</td>
<td><span style="color: purple">our</span> (<span style="color: #cd853f">$g</span>, <span style="color: #cd853f">$h</span>) = (7, 8);<br>
<span style="color: purple">sub</span> <span style="color: #0000cd">swap_globals</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>($g, $h) = ($h, $g);<br>
}</td>
<td><span style="color: #cd853f">g</span>, <span style="color: #cd853f">h</span> = 7, 8<br>
<span style="color: purple">def</span> <span style="color: #0000cd">swap_globals</span>():<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">global</span> g, h<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>g, h = h, g</td>
<td><span style="color: #cd853f">$g</span>, <span style="color: #cd853f">$h</span> = 7, 8<br>
<span style="color: purple">def</span> <span style="color: #0000cd">swap_globals</span>()<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: #cd853f">$g</span>, <span style="color: #cd853f">$h</span> = <span style="color: #cd853f">$h</span>, <span style="color: #cd853f">$g</span><br>
end</td>
</tr>
<tr>
<td><a href="#constant-declaration">constant declaration</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">class</span> <span style="color: green">Math</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">const</span> pi = 3.14;<br>
}<br>
<span style="color: #b22222"># how to reference constant:</span><br>
<span style="color: green">Math</span>::pi</td>
<td><span style="color: purple">use</span> <span style="color: #0000cd">constant</span> <span style="color: purple">PI</span> =&gt; 3.14;</td>
<td><span style="color: #b22222"># uppercase identifiers<br>
# constant by convention</span><br>
<span style="color: #cd853f">PI</span> = 3.14</td>
<td><span style="color: #b22222"># warning if capitalized<br>
# identifier is reassigned</span><br>
<span style="color: green">PI</span> = 3.14</td>
</tr>
<tr>
<td><a href="#comment">to-end-of-line comment</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: #b22222"><span style="white-space: pre-wrap;">//</span> comment<br>
# comment</span></td>
<td><span style="color: #b22222"># comment</span></td>
<td><span style="color: #b22222"># comment</span></td>
<td><span style="color: #b22222"># comment</span></td>
</tr>
<tr>
<td><a href="#multiline-comment">multiline comment</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: #b22222">/* comment line<br>
another line */</span></td>
<td><span style="color: #b22222">=for<br>
comment line<br>
another line<br>
=cut</span></td>
<td><span style="color: maroon">'''comment line<br>
another line'''</span></td>
<td><span style="color: #b22222">=begin<br>
comment line<br>
another line<br>
=end</span></td>
</tr>
<tr>
<td><a href="#null">null</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: teal">NULL</span> <span style="color: #b22222"># case insensitive</span></td>
<td><span style="color: green">undef</span></td>
<td><span style="color: teal">None</span></td>
<td><span style="color: #cd853f">nil</span></td>
</tr>
<tr>
<td><a href="#null-test">null test</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>is_null($<span style="color: #cd853f">v</span>)<br>
! isset($<span style="color: #cd853f">v</span>)</td>
<td>! <span style="color: green">defined</span> $v</td>
<td>v == <span style="color: teal">None</span><br>
v <span style="color: purple">is</span> <span style="color: teal">None</span></td>
<td>v == <span style="color: #cd853f">nil</span><br>
v.nil?</td>
</tr>
<tr>
<td><a href="#undefined-access">undefined variable access</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: teal">NULL</span></td>
<td><span style="color: gray"><em>error under</em> use strict; <em>otherwise</em> undef</span></td>
<td><span style="color: gray"><em>raises</em> NameError</span></td>
<td><span style="color: gray"><em>raises</em> NameError</span></td>
</tr>
<tr>
<td><a href="#undefined-test">undefined test</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>same as null test; no distinction between undefined variables and variables set to</em> NULL</span></td>
<td><span style="color: gray"><em>same as null test; no distinction between undefined variables and variables set to</em> undef</span></td>
<td><span style="color: #cd853f">not_defined</span> = <span style="color: purple">False</span><br>
<span style="color: purple">try</span>: v<br>
<span style="color: purple">except</span> NameError: not_defined = <span style="color: purple">True</span></td>
<td>! <span style="color: purple">defined?</span>(v)</td>
</tr>
<tr>
<th colspan="5"><a name="arithmetic-logic"></a><a href="#arithmetic-logic-notes">arithmetic and logic</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#true-false">true and false</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: teal">TRUE FALSE</span> <span style="color: #b22222"># case insensitve</span></td>
<td>1&nbsp;0</td>
<td><span style="color: purple">True False</span></td>
<td><span style="color: #cd853f">true false</span></td>
</tr>
<tr>
<td><a href="#falsehoods">falsehoods</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: teal">FALSE NULL</span> 0&nbsp;0.0 <span style="color: maroon">'' '0'</span> array()</td>
<td><span style="color: green">undef</span> 0&nbsp;0.0 <span style="color: maroon">'' '0'</span> ()</td>
<td><span style="color: purple">False</span> <span style="color: teal">None</span> 0&nbsp;0.0 <span style="color: maroon">''</span> [] {}</td>
<td><span style="color: #cd853f">false nil</span></td>
</tr>
<tr>
<td><a href="#logical-operators">logical operators</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>&amp;&amp; <span style="white-space: pre-wrap;">||</span> ! <span style="color: gray"><em>lower precedence:</em></span> <span style="color: purple">and or xor</span></td>
<td><span style="color: green">and or not</span> <span style="color: gray"><em>also:</em></span> &amp;&amp; <span style="white-space: pre-wrap;">||</span> !</td>
<td><span style="color: purple">and or not</span></td>
<td><span style="color: purple">and or not</span> <span style="color: gray"><em>also:</em></span> &amp;&amp; <span style="white-space: pre-wrap;">||</span> !</td>
</tr>
<tr>
<td><a href="#conditional-expression">conditional expression</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">x</span> &gt; 0 ? $<span style="color: #cd853f">x</span> : -$<span style="color: #cd853f">x</span></td>
<td>$x &gt; 0 ? $x : -$x</td>
<td>x <span style="color: purple">if</span> x &gt; 0 <span style="color: purple">else</span> -x</td>
<td>x &gt; 0 ? x : -x</td>
</tr>
<tr>
<td><a href="#comparison-operators">comparison operators</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>== != <span style="color: gray"><em>or</em></span> &lt;&gt; &gt; &lt; &gt;= &lt;=<br>
<span style="color: gray"><em>no conversion:</em></span> === !==</td>
<td><span style="color: gray"><em>numbers only:</em></span> == != &gt; &lt; &gt;= &lt;=<br>
<span style="color: gray"><em>strings:</em></span> <span style="color: green">eq ne gt lt ge le</span></td>
<td>== != &gt; &lt; &gt;= &lt;=</td>
<td>== != &gt; &lt; &gt;= &lt;=</td>
</tr>
<tr>
<td><a href="#number-string-conversion">convert from string, to string</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>7 + <span style="color: maroon">'12'</span><br>
73.9 + <span style="color: maroon">'.037'</span><br>
<span style="color: maroon">'value: '</span> . 8</td>
<td>7 + <span style="color: maroon">'12'</span><br>
73.9 + <span style="color: maroon">'.037'</span><br>
<span style="color: maroon">'value: '</span> . 8</td>
<td>7 + <span style="color: purple">int</span>(<span style="color: maroon">'12'</span>)<br>
73.9 + <span style="color: purple">float</span>(<span style="color: maroon">'.037'</span>)<br>
<span style="color: maroon">'value: '</span> + <span style="color: purple">str</span>(8)</td>
<td>7 + <span style="color: maroon">"12"</span>.to_i<br>
73.9 + <span style="color: maroon">".037"</span>.to_f<br>
<span style="color: maroon">"value: "</span> + "8".to_s</td>
</tr>
<tr>
<td><a href="#arithmetic-operators">arithmetic operators</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>+ - * / <span style="color: gray"><em>none</em></span> % pow(b,e)</td>
<td>+ - * / <span style="color: gray"><em>none</em></span> % <span style="white-space: pre-wrap;">**</span></td>
<td>+ - * / // % <span style="white-space: pre-wrap;">**</span></td>
<td>+ - * x.fdiv(y) / % <span style="white-space: pre-wrap;">**</span></td>
</tr>
<tr>
<td><a href="#integer-division">integer division</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>(<span style="color: green">int</span>) ($<span style="color: #cd853f">a</span> / $<span style="color: #cd853f">b</span>)</td>
<td><span style="color: green">int</span> ( $a / $b )</td>
<td>a // b</td>
<td>a / b</td>
</tr>
<tr>
<td><a href="#float-division">float division</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> / $<span style="color: #cd853f">b</span></td>
<td>$a / $b</td>
<td><span style="color: purple">float</span>(a) / b<br>
<span style="color: #b22222"># python 3:</span><br>
a / b</td>
<td>a.to_f / b <span style="color: gray"><em>or</em></span><br>
a.fdiv(b)</td>
</tr>
<tr>
<td><a href="#arithmetic-functions">arithmetic functions</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>sqrt exp log sin cos tan asin acos atan atan2</td>
<td><span style="color: green">sqrt exp log sin cos</span> <span style="color: gray"><em>none none none none</em></span> <span style="color: green">atan2</span></td>
<td><span style="color: purple">from</span> math <span style="color: purple">import</span> sqrt, exp, log, \<br>
sin, cos, tan, asin, acos, atan, atan2</td>
<td>include <span style="color: green">Math</span><br>
sqrt exp log sin cos tan asin acos atan atan2</td>
</tr>
<tr>
<td><a href="#arithmetic-truncation">arithmetic truncation</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>abs($<span style="color: #cd853f">x</span>)<br>
round($<span style="color: #cd853f">x</span>)<br>
ceil($<span style="color: #cd853f">x</span>)<br>
floor($<span style="color: #cd853f">x</span>)</td>
<td><span style="color: green">abs</span>($x)<br>
<span style="color: gray"><em>none</em></span><br>
<span style="color: gray"><em>POSIX:</em></span><br>
ceil($x)<br>
floor($x)</td>
<td><span style="color: purple">import</span> math<br>
<span style="color: purple">abs</span>(x)<br>
<span style="color: purple">int</span>(<span style="color: purple">round</span>(x))<br>
math.ceil(x)<br>
math.floor(x)</td>
<td>x.abs<br>
x.round<br>
x.ceil<br>
x.floor</td>
</tr>
<tr>
<td><a href="#min-max">min and max</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>min(1,2,3)<br>
max(1,2,3)<br>
<span style="color: #b22222"># of an array:</span><br>
$<span style="color: #cd853f">a</span> = array(1,2,3)<br>
call_user_func_array(min, $<span style="color: #cd853f">a</span>)<br>
call_user_func_array(max, $<span style="color: #cd853f">a</span>)</td>
<td><span style="color: purple">use</span> <span style="color: #0000cd">List::Util</span> <span style="color: teal">qw</span>( min max);<br>
min(1,2,3);<br>
max(1,2,3);<br>
<span style="color: teal">@a</span> = (1,2,3);<br>
min(<span style="color: teal">@a</span>);<br>
max(<span style="color: teal">@a</span>);</td>
<td><span style="color: purple">min</span>(1,2,3)<br>
<span style="color: purple">max</span>(1,2,3)<br>
<span style="color: purple">min</span>([1,2,3])<br>
<span style="color: purple">max</span>([1,2,3])</td>
<td>[1,2,3].min<br>
[1,2,3].max</td>
</tr>
<tr>
<td><a href="#division-zero">division by zero</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>returns zero with warning</em></span></td>
<td><span style="color: gray"><em>error</em></span></td>
<td><span style="color: gray"><em>raises</em> ZeroDivisionError</span></td>
<td><span style="color: gray"><em>integer division raises</em> ZeroDivisionError</span><br>
<span style="color: gray"><em>float division returns</em> Infinity</span></td>
</tr>
<tr>
<td><a href="#integer-overflow">integer overflow</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>converted to float</em></span></td>
<td><span style="color: gray"><em>converted to float</em></span></td>
<td><span style="color: gray"><em>becomes arbitrary length integer of type</em> long</span></td>
<td><span style="color: gray"><em>becomes arbitrary length integer of type</em> Bignum</span></td>
</tr>
<tr>
<td><a href="#float-overflow">float overflow</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>INF</td>
<td>inf</td>
<td><span style="color: gray"><em>raises</em> OverflowError</span></td>
<td><span style="color: green">Infinity</span></td>
</tr>
<tr>
<td><a href="#sqrt-negative-two">sqrt -2</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>NaN</td>
<td><span style="color: gray"><em>error</em></span></td>
<td><span style="color: #b22222"># raises ValueError:</span><br>
<span style="color: purple">import</span> math<br>
math.sqrt(-2)<br>
<span style="color: #b22222"># returns complex float:</span><br>
<span style="color: purple">import</span> cmath<br>
cmath.sqrt(-2)</td>
<td><span style="color: gray"><em>raises</em> Errno::EDOM</span></td>
</tr>
<tr>
<td><a href="#rational-numbers">rational numbers</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">from</span> fractions <span style="color: purple">import</span> Fraction<br>
<span style="color: #cd853f">x</span> = Fraction(22,7)<br>
x.numerator<br>
x.denominator</td>
<td>require <span style="color: maroon">'rational'</span><br>
x = <span style="color: green">Rational</span>(22,7)<br>
x.numerator<br>
x.denominator</td>
</tr>
<tr>
<td><a href="#complex-numbers">complex numbers</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: #cd853f">z</span> = 1 + 1.414j<br>
z.real<br>
z.imag</td>
<td>require <span style="color: maroon">'complex'</span><br>
z = 1 + 1.414.im<br>
z.real<br>
z.imag</td>
</tr>
<tr>
<td><a href="#random">random integer, uniform float, normal float</a></td>
<td>rand(0,99)<br>
lcg_value()<br>
<span style="color: gray"><em>none</em></span></td>
<td><span style="color: green">int</span>(<span style="color: green">rand</span>() * 100)<br>
<span style="color: green">rand</span>()<br>
<span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> random<br>
random.randint(0,99)<br>
random.random()<br>
random.gauss(0,1)</td>
<td>rand(100)<br>
rand<br>
<span style="color: gray"><em>none</em></span></td>
</tr>
<tr>
<td><a href="#bit-operators">bit operators</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
</tr>
<tr>
<th colspan="5"><a name="strings"></a><a href="#strings-notes">strings</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#character-literal">character literal</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr>
<tr>
<td><a href="#chr-ord">chr and ord</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>chr(65)<br>
ord(<span style="color: maroon">"A"</span>)</td>
<td><span style="color: green">chr</span>(65)<br>
<span style="color: green">ord</span>(<span style="color: maroon">"A"</span>)</td>
<td><span style="color: purple">chr</span>(65)<br>
<span style="color: purple">ord</span>(<span style="color: maroon">'A'</span>)</td>
<td>65.chr<br>
<span style="color: maroon">"A"</span>.ord</td>
</tr>
<tr>
<td><a href="#string-literal">string literal</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: maroon">'don\'t say "no"'</span><br>
<span style="color: maroon">"don't say \"no\""</span></td>
<td><span style="color: maroon">'don\'t say "no"'</span><br>
<span style="color: maroon">"don't say \"no\""</span></td>
<td><span style="color: maroon">'don\'t say "no"'</span><br>
<span style="color: maroon">"don't say \"no\""</span></td>
<td><span style="color: maroon">'don\'t say "no"'</span><br>
<span style="color: maroon">"don't say \"no\""</span></td>
</tr>
<tr>
<td><a href="#string-literal-newline">newline in literal</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>yes</em></span></td>
<td><span style="color: gray"><em>yes</em></span></td>
<td><span style="color: gray"><em>no, use escape or triple quote literal</em></span></td>
<td><span style="color: gray"><em>yes</em></span></td>
</tr>
<tr>
<td><a href="#here-document">here document</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">computer</span> = <span style="color: maroon">'PC'</span>;<br>
$<span style="color: #cd853f">s</span> = <span style="color: maroon"><span style="white-space: pre-wrap;">&lt;&lt;&lt;</span>EOF<br>
here document<br>
there $computer<br>
EOF</span>;</td>
<td>$computer = <span style="color: maroon">'PC'</span>;<br>
$s = <span style="white-space: pre-wrap;">&lt;&lt;</span>EOF;<br>
<span style="color: maroon">here document<br>
there $computer</span><br>
EOF</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>computer = <span style="color: maroon">'PC'</span><br>
s = <span style="color: maroon"><span style="white-space: pre-wrap;">&lt;&lt;</span>EOF<br>
here document<br>
there</span> <span style="color: #cd853f">#{computer}</span><br>
<span style="color: maroon">EOF</span></td>
</tr>
<tr>
<td><a href="#string-escapes">escapes</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>single quoted:</em></span><br>
\' \\<br>
<span style="color: gray"><em>double quoted:</em></span><br>
\f \n \r \t \v \x<span style="color: gray"><em>hh</em></span> \$ \" \<span style="color: gray"><em>ooo</em></span></td>
<td><span style="color: gray"><em>single quoted:</em></span><br>
\' \\<br>
<span style="color: gray"><em>double quoted:</em></span><br>
\a \b \c<span style="color: gray"><em>x</em></span> \e \f \n \r \t \x<span style="color: gray"><em>hh</em></span> \x{<span style="color: gray"><em>hhhh</em></span>} \<span style="color: gray"><em>ooo</em></span></td>
<td>\<span style="color: gray"><em>newline</em></span> \\ \' \" \a \b \f \n \r \t \v \<span style="color: gray"><em>ooo</em></span> \x<span style="color: gray"><em>hh</em></span><br>
<span style="color: #b22222"># python 3:</span><br>
\u<span style="color: gray"><em>hhhh</em></span></td>
<td><span style="color: #b22222"># single quoted:</span><br>
\' \\<br>
<span style="color: #b22222"># double quoted:</span><br>
\a \b \c<span style="color: gray"><em>x</em></span> \e \f \n \r \s \t \u<span style="color: gray"><em>hhhh</em></span> \u{<span style="color: gray"><em>hhhhh</em></span>} \v \x<span style="color: gray"><em>hh</em></span> \<span style="color: gray"><em>ooo</em></span></td>
</tr>
<tr>
<td><a href="#encoding">encoding</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="#variable-interpolation">variable interpolation</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">count</span> = 3;<br>
$<span style="color: #cd853f">item</span> = <span style="color: maroon">"ball"</span>;<br>
<span style="color: purple">echo</span> <span style="color: maroon">"$count ${item}s\n"</span>;</td>
<td><span style="color: purple">my</span> <span style="color: #cd853f">$count</span> = 3;<br>
<span style="color: purple">my</span> <span style="color: #cd853f">$item</span> = <span style="color: maroon">"ball"</span>;<br>
<span style="color: green">print</span> <span style="color: maroon">"$count ${item}s\n"</span>;</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>count = 3<br>
item = <span style="color: maroon">"ball"</span><br>
puts <span style="color: maroon">"</span><span style="color: #cd853f">#{count} #{item}</span><span style="color: maroon">s"</span></td>
</tr>
<tr>
<td><a href="#string-length">length</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>strlen(<span style="color: maroon">"hello"</span>)</td>
<td><span style="color: green">length</span>(<span style="color: maroon">"hello"</span>)</td>
<td><span style="color: purple">len</span>(<span style="color: maroon">'hello'</span>)</td>
<td><span style="color: maroon">"hello"</span>.length<br>
<span style="color: maroon">"hello"</span>.size</td>
</tr>
<tr>
<td><a href="#character-count">character count</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> = count_chars(<span style="color: maroon">"(3*(7+12))"</span>);<br>
$<span style="color: #cd853f">a</span>[ord(<span style="color: maroon">'('</span>)]</td>
<td><span style="color: maroon">"(3*(7+12))"</span> =~ <span style="color: teal">tr</span>/(<span style="white-space: pre-wrap;">//</span></td>
<td><span style="color: maroon">'(3*(7+12))'</span>.count(<span style="color: maroon">'('</span>)</td>
<td><span style="color: maroon">'(3*(7+12))'</span>.count(<span style="color: maroon">'('</span>)</td>
</tr>
<tr>
<td><a href="#index-substring">index of substring</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>strpos(<span style="color: maroon">"foo bar"</span>, <span style="color: maroon">"bar"</span>)</td>
<td><span style="color: green">index</span>(<span style="color: maroon">"foo bar"</span>,<span style="color: maroon">"bar"</span>)</td>
<td><span style="color: maroon">'foo bar'</span>.index(<span style="color: maroon">'bar'</span>)</td>
<td><span style="color: maroon">"foo bar"</span>.index(<span style="color: maroon">"bar"</span>)</td>
</tr>
<tr>
<td><a href="#extract-substring">extract substring</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>substr(<span style="color: maroon">"foo bar"</span>, 4, 3)</td>
<td><span style="color: green">substr</span>(<span style="color: maroon">"foo bar"</span>,4,3)</td>
<td><span style="color: maroon">"foo bar"</span>[4:7]</td>
<td><span style="color: maroon">"foo bar"</span>[4,3]</td>
</tr>
<tr>
<td><a href="#string-concatenate">concatenate</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: maroon">"hello, "</span> . <span style="color: maroon">"world"</span></td>
<td><span style="color: maroon">"hello, "</span> . <span style="color: maroon">"world"</span></td>
<td><span style="color: maroon">'hello, '</span> + <span style="color: maroon">'world'</span></td>
<td><span style="color: maroon">"hello, "</span> + <span style="color: maroon">"world"</span></td>
</tr>
<tr>
<td><a href="#string-replicate">replicate</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">hbar</span> = str_repeat(<span style="color: maroon">'-'</span>, 80);</td>
<td><span style="color: purple">my</span> <span style="color: #cd853f">$hbar</span> = <span style="color: maroon">'-'</span> <span style="color: green">x</span> 80;</td>
<td><span style="color: #cd853f">hbar</span> = <span style="color: maroon">'-'</span> * 80</td>
<td>hbar = <span style="color: maroon">'-'</span> * 80</td>
</tr>
<tr>
<td><a href="#split">split</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>explode(<span style="color: maroon">" "</span>,<span style="color: maroon">"foo bar baz"</span>)<br>
preg_split(<span style="color: maroon">'/\s+/'</span>,<span style="color: maroon">"foo bar baz"</span>)</td>
<td><span style="color: green">split</span>(/\s+/,<span style="color: maroon">"foo bar baz"</span>)</td>
<td><span style="color: maroon">'foo bar baz'</span>.split()</td>
<td><span style="color: maroon">"foo bar baz"</span>.split</td>
</tr>
<tr>
<td><a href="#join">join</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> = array(<span style="color: maroon">"foo"</span>,<span style="color: maroon">"bar"</span>,<span style="color: maroon">"baz"</span>);<br>
implode(<span style="color: maroon">" "</span>, $<span style="color: #cd853f">a</span>)</td>
<td><span style="color: green">join</span>(<span style="color: maroon">' '</span>,(<span style="color: maroon">"foo"</span>,<span style="color: maroon">"bar"</span>,<span style="color: maroon">"baz"</span>))</td>
<td><span style="color: maroon">' '</span>.join([<span style="color: maroon">'foo'</span>,<span style="color: maroon">'bar'</span>,<span style="color: maroon">'baz'</span>])</td>
<td>[<span style="color: maroon">'foo'</span>,<span style="color: maroon">'bar'</span>,<span style="color: maroon">'baz'</span>].join(<span style="color: maroon">' '</span>)</td>
</tr>
<tr>
<td><a href="#scan">scan</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">s</span> = <span style="color: maroon">"foo bar baz"</span>;<br>
preg_match_all(<span style="color: maroon">'/\w+/'</span>, $<span style="color: #cd853f">s</span>, $<span style="color: #cd853f">a</span>);<br>
$<span style="color: #cd853f">a</span>[0]</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> re<br>
<span style="color: #cd853f">s</span> = <span style="color: maroon">'foo bar baz'</span><br>
re.compile(<span style="color: maroon">'\w+'</span>).findall(s)</td>
<td><span style="color: maroon">"foo bar baz"</span>.scan(<span style="color: maroon">/\w+/</span>)</td>
</tr>
<tr>
<td><a href="#pack-unpack">pack and unpack</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">f</span>=<span style="color: maroon">"a3ilfd"</span>;<br>
$<span style="color: #cd853f">s</span>=pack($<span style="color: #cd853f">f</span>,<span style="color: maroon">"hello"</span>,7,7,3.14,3.14);<br>
unpack(<span style="color: maroon">"a3a/ii/ll/ff/dd"</span>,$<span style="color: #cd853f">s</span>);</td>
<td><span style="color: purple">my</span> (<span style="color: #cd853f">$f</span>, <span style="color: #cd853f">$s</span>);<br>
$f=<span style="color: maroon">"a5ilfd"</span>;<br>
$s=<span style="color: green">pack</span>($f,<span style="color: maroon">"hello"</span>,7,7,3.14,3.14);<br>
<span style="color: green">unpack</span>($f,$s)</td>
<td><span style="color: purple">import</span> struct<br>
<span style="color: #cd853f">f</span>=<span style="color: maroon">'5silfd'</span><br>
<span style="color: #cd853f">s</span>=struct.pack(f,<span style="color: maroon">'hello'</span>,7,7,3.14,3.14)<br>
struct.unpack(f,s)</td>
<td>f=<span style="color: maroon">"a5ilfd"</span><br>
s=[<span style="color: maroon">"hello"</span>,7,7,3.14,3.14].pack(f)<br>
s.unpack(f)</td>
</tr>
<tr>
<td><a href="#sprintf">sprintf</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">fmt</span> = <span style="color: maroon">"foo: %s %d %f"</span>;<br>
sprintf($<span style="color: #cd853f">fmt</span>, <span style="color: maroon">'bar'</span>, 13, 3.7);</td>
<td>my <span style="color: #cd853f">$fmt</span> = <span style="color: maroon">"foo: %s %d %f"</span>;<br>
<span style="color: green">sprintf</span>($fmt, <span style="color: maroon">'bar'</span>, 13, 3.7)</td>
<td><span style="color: maroon">'foo: %s %d %f'</span> % (<span style="color: maroon">'bar'</span>,13,3.7)<br>
<span style="color: #b22222"># new in python 2.6:</span><br>
<span style="color: #cd853f">fmt</span> = <span style="color: maroon">'foo: {0} {1} {2}'</span><br>
<span style="color: purple">str</span>.format(fmt, <span style="color: maroon">'bar'</span>, 13, 3.7)</td>
<td><span style="color: maroon">"foo: %s %d %f"</span> % [<span style="color: maroon">'bar'</span>,13,3.7]</td>
</tr>
<tr>
<td><a href="#case">case manipulation</a></td>
<td>strtoupper(<span style="color: maroon">"hello"</span>)<br>
strtolower(<span style="color: maroon">"HELLO"</span>)<br>
ucfirst(<span style="color: maroon">"hello"</span>)</td>
<td><span style="color: green">uc</span>(<span style="color: maroon">"hello"</span>)<br>
<span style="color: green">lc</span>(<span style="color: maroon">"HELLO"</span>)<br>
<span style="color: green">ucfirst</span>(<span style="color: maroon">"hello"</span>)</td>
<td><span style="color: maroon">'hello'</span>.upper()<br>
<span style="color: maroon">'HELLO'</span>.lower()<br>
<span style="color: maroon">'hello'</span>.capitalize()</td>
<td><span style="color: maroon">"hello"</span>.upcase<br>
<span style="color: maroon">"HELLO"</span>.downcase<br>
<span style="color: maroon">"hello"</span>.capitalize</td>
</tr>
<tr>
<td><a href="#strip">strip</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>trim(<span style="color: maroon">" foo "</span>)<br>
ltrim(<span style="color: maroon">" foo"</span>)<br>
rtrim(<span style="color: maroon">"foo "</span>)</td>
<td><span style="color: gray"><em>use regex substitution</em></span></td>
<td><span style="color: maroon">' foo '</span>.strip()<br>
<span style="color: maroon">' foo'</span>.lstrip()<br>
<span style="color: maroon">'foo '</span>.rstrip()</td>
<td><span style="color: maroon">" foo "</span>.strip<br>
<span style="color: maroon">" foo"</span>.lstrip<br>
<span style="color: maroon">"foo "</span>.rstrip</td>
</tr>
<tr>
<td><a href="#pad">pad on right, on left</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>str_pad(<span style="color: maroon">"hello"</span>, 10)<br>
str_pad(<span style="color: maroon">"hello"</span>, 10, <span style="color: maroon">" "</span>,<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">STR_PAD_LEFT</span>)</td>
<td><span style="color: green">sprintf</span>(<span style="color: maroon">"%-10s"</span>,<span style="color: maroon">"hello"</span>)<br>
<span style="color: green">sprintf</span>(<span style="color: maroon">"%10s"</span>,<span style="color: maroon">"hello"</span>)</td>
<td><span style="color: maroon">'hello'</span>.ljust(10)<br>
<span style="color: maroon">'hello'</span>.rjust(10)</td>
<td><span style="color: maroon">"hello"</span>.ljust(10)<br>
<span style="color: maroon">"hello"</span>.rjust(10)</td>
</tr>
<tr>
<td><a href="#character-translation">character translation</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">ins</span> = implode(range(<span style="color: maroon">'a'</span>,<span style="color: maroon">'z'</span>));<br>
$<span style="color: #cd853f">outs</span> = substr($<span style="color: #cd853f">ins</span>,13,13) . substr($<span style="color: #cd853f">ins</span>,0,13);<br>
strtr(<span style="color: maroon">"hello"</span>,$<span style="color: #cd853f">ins</span>,$<span style="color: #cd853f">outs</span>)</td>
<td>$s = <span style="color: maroon">"hello"</span>;<br>
$s =~ <span style="color: green">tr</span>/a-z/n-za-m/;</td>
<td><span style="color: purple">from</span> string <span style="color: purple">import</span> lowercase <span style="color: purple">as</span> ins<br>
<span style="color: purple">from</span> string <span style="color: purple">import</span> maketrans<br>
<span style="color: #cd853f">outs</span> = ins[13:] + ins[:13]<br>
<span style="color: maroon">"hello"</span>.translate(maketrans(ins,outs))</td>
<td><span style="color: maroon">"hello"</span>.tr(<span style="color: maroon">'a-z'</span>,<span style="color: maroon">'n-za-m'</span>)</td>
</tr>
<tr>
<td><a href="#regexp-match">regexp match</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>preg_match(<span style="color: maroon">'/^\d{4}$/'</span>,<span style="color: maroon">"1999"</span>)<br>
preg_match(<span style="color: maroon">'/^[a-z]+/'</span>,<span style="color: maroon">"foo BAR"</span>)<br>
preg_match(<span style="color: maroon">'/[A-Z]+/'</span>,<span style="color: maroon">"foo BAR"</span>)</td>
<td><span style="color: maroon">"1999"</span> =~ /^\d{4}$/<br>
<span style="color: maroon">"foo BAR"</span> =~ <span style="color: maroon">/^[a-z]+/</span><br>
<span style="color: maroon">"foo BAR"</span> =~ <span style="color: maroon">/[A-Z]+/</span></td>
<td><span style="color: purple">import</span> re<br>
re.match(<span style="color: maroon">"\d{4}$"</span>,<span style="color: maroon">"1999"</span>)<br>
re.match(<span style="color: maroon">"[a-z]+"</span>,<span style="color: maroon">"foo BAR"</span>)<br>
re.search(<span style="color: maroon">"[A-Z]+"</span>,<span style="color: maroon">"foo BAR"</span>)</td>
<td><span style="color: maroon">"1999"</span>.match(<span style="color: maroon">/^\d{4}$/</span>)<br>
<span style="color: maroon">"foo BAR"</span>.match(<span style="color: maroon">/^[a-z]+/</span>)<br>
<span style="color: maroon">"foo BAR"</span>.match(<span style="color: maroon">/[A-Z]+/</span>)</td>
</tr>
<tr>
<td><a href="#match-prematch-postmatch">match, prematch, postmatch</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">my</span> <span style="color: #cd853f">$s</span> = <span style="color: maroon">"A 17&nbsp;B 12"</span>;<br>
<span style="color: purple">while</span> ( $s =~ <span style="color: maroon">/\d+/</span> ) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$discard</span> = $<span style="white-space: pre-wrap;">`</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$number</span> = $&amp;;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$s = $<span style="white-space: pre-wrap;">'</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> $number . <span style="color: maroon">"\n"</span>;<br>
}</td>
<td><span style="color: #cd853f">s</span> = <span style="color: maroon">"A 17&nbsp;B 12"</span><br>
<span style="color: purple">while True</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>m = re.search(<span style="color: maroon">'\d+'</span>,s)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">if not</span> m:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">break</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>discard = s[0:m.start(0)]<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>number = m.group()<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>s = s[m.end(0):<span style="color: purple">len</span>(s)]<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(s)</td>
<td>s = <span style="color: maroon">"A 17&nbsp;B 12"</span><br>
while (<span style="color: maroon">/\d+/</span>.match(s)) do<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>discard = $<span style="white-space: pre-wrap;">`</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>number = $&amp;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>s = $<span style="white-space: pre-wrap;">'</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts number<br>
end</td>
</tr>
<tr>
<td><a href="#substring-match">substring matches</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> = array();<br>
$<span style="color: #cd853f">s</span> = <span style="color: maroon">"2010-06-03"</span>;<br>
$<span style="color: #cd853f">r</span> = <span style="color: maroon">'/(\d{4})-(\d{2})-(\d{2})/'</span>;<br>
preg_match($<span style="color: #cd853f">r</span>, $<span style="color: #cd853f">s</span>, $<span style="color: #cd853f">a</span>);<br>
list($_, $<span style="color: #cd853f">yr</span>, $<span style="color: #cd853f">mn</span>, $<span style="color: #cd853f">dy</span>) = $<span style="color: #cd853f">a</span>;</td>
<td><span style="color: maroon">"2010-06-03"</span> =~ <span style="color: maroon">/(\d{4})-(\d{2})-(\d{2})/</span>;<br>
($yr, $mn, $dy) = ($1, $2, $3);</td>
<td><span style="color: purple">import</span> re<br>
<span style="color: #cd853f">reg</span> = <span style="color: maroon">"(\d{4})-(\d{2})-(\d{2})"</span><br>
<span style="color: #cd853f">m</span> = re.search(reg, <span style="color: maroon">"2010-06-03"</span>)<br>
<span style="color: #cd853f">yr</span>,<span style="color: #cd853f">mn</span>,<span style="color: #cd853f">dy</span> = m.groups()</td>
<td>reg = <span style="color: maroon">/(\d{4})-(\d{2})-(\d{2})/</span><br>
m = reg.match(<span style="color: maroon">"2010-06-03"</span>)<br>
yr,mn,dy = m[1..3]</td>
</tr>
<tr>
<td><a href="#single-substitution">single substitution</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">s</span> = <span style="color: maroon">'foo bar bar'</span>;<br>
preg_replace(<span style="color: maroon">'/bar/'</span>,<span style="color: maroon">'baz'</span>,$<span style="color: #cd853f">s</span>,1);</td>
<td>$s = <span style="color: maroon">"foo bar bar"</span>;<br>
$s =~ <span style="color: green">s</span><span style="color: maroon">/bar/baz/</span>;<br>
$s</td>
<td><span style="color: purple">import</span> re<br>
<span style="color: #cd853f">s</span> = <span style="color: maroon">'foo bar bar'</span><br>
re.compile(<span style="color: maroon">'bar'</span>).sub(<span style="color: maroon">'baz'</span>, s, 1)</td>
<td><span style="color: maroon">"foo bar bar"</span>.sub(<span style="color: maroon">/bar/</span>,<span style="color: maroon">'baz'</span>)</td>
</tr>
<tr>
<td><a href="#substitution">global substitution</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">s</span> = <span style="color: maroon">'foo bar bar'</span>;<br>
preg_replace(<span style="color: maroon">'/bar/'</span>, <span style="color: maroon">'baz'</span>, $<span style="color: #cd853f">s</span>);</td>
<td>$s = <span style="color: maroon">"foo bar bar"</span>;<br>
$s =~ <span style="color: green">s</span><span style="color: maroon">/bar/baz/</span>g;<br>
$s</td>
<td><span style="color: purple">import</span> re<br>
<span style="color: #cd853f">s</span> = <span style="color: maroon">'foo bar bar'</span><br>
re.compile(<span style="color: maroon">'bar'</span>).sub(<span style="color: maroon">'baz'</span>, s)</td>
<td><span style="color: maroon">"foo bar bar"</span>.gsub(<span style="color: maroon">/bar/</span>,<span style="color: maroon">'baz'</span>)</td>
</tr>
<tr>
<th colspan="5"><a name="containers"></a><a href="#containers-notes">containers</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#array-literal">array literal</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">nums</span> = array(1,2,3,4);</td>
<td><span style="color: teal">@nums</span> = (1,2,3,4);</td>
<td><span style="color: #cd853f">nums</span> = [1,2,3,4]</td>
<td>nums = [1,2,3,4]</td>
</tr>
<tr>
<td><a href="#array-size">array size</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>count($<span style="color: #cd853f">nums</span>)</td>
<td><span style="color: teal">$#nums</span> + 1 <span style="color: gray"><em>or</em></span><br>
<span style="color: green">scalar</span>(<span style="color: teal">@nums</span>)</td>
<td><span style="color: purple">len</span>(nums)</td>
<td>nums.size<br>
nums.length <span style="color: #b22222"># same as size</span></td>
</tr>
<tr>
<td><a href="#array-lookup">array lookup</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">nums</span>[0]</td>
<td><span style="color: teal">$nums</span>[0]</td>
<td>nums[0]</td>
<td>nums[0]</td>
</tr>
<tr>
<td><a href="#array-element-index">index of array element</a></td>
<td>array_search(2, array(1,2,3))</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>[1,2,3].index(2)</td>
<td>[1,2,3].index(2)</td>
</tr>
<tr>
<td><a href="#array-slice">array slice</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: #b22222"># 3rd arg is length of slice:</span><br>
array_slice($<span style="color: #cd853f">nums</span>,1,2)</td>
<td><span style="color: teal">@nums</span>[1..2]</td>
<td>nums[1:3]</td>
<td>nums[1..2]</td>
</tr>
<tr>
<td><a href="#array-back">manipulate back of array</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> = array(6,7,8);<br>
array_push($<span style="color: #cd853f">a</span>, 9);<br>
array_pop($<span style="color: #cd853f">a</span>);</td>
<td><span style="color: teal">@a</span> = (6,7,8);<br>
<span style="color: green">push</span> <span style="color: teal">@a</span>, 9;<br>
<span style="color: green">pop</span> <span style="color: teal">@a</span>;</td>
<td><span style="color: #cd853f">a</span> = [6,7,8]<br>
a.append(9)<br>
a.pop()</td>
<td>a = [6,7,8]<br>
a.push(9)<br>
a <span style="white-space: pre-wrap;">&lt;&lt;</span> 9 <span style="color: #b22222"># same as push</span><br>
a.pop</td>
</tr>
<tr>
<td><a href="#array-front">manipulate front of array</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> = array(6,7,8);<br>
array_unshift($<span style="color: #cd853f">a</span>, 5);<br>
array_shift($<span style="color: #cd853f">a</span>);</td>
<td><span style="color: teal">@a</span> = (6,7,8);<br>
<span style="color: green">unshift</span> <span style="color: teal">@a</span>, 5;<br>
<span style="color: green">shift</span> <span style="color: teal">@a</span>;</td>
<td><span style="color: #cd853f">a</span> = [6,7,8]<br>
a.insert(0,5)<br>
a.pop(0)</td>
<td>a = [6,7,8]<br>
a.unshift(5)<br>
a.shift</td>
</tr>
<tr>
<td><a href="#array-concatenation">array concatenation</a></td>
<td>$<span style="color: #cd853f">a</span> = array(1,2,3);<br>
$<span style="color: #cd853f">b</span> = array_merge($<span style="color: #cd853f">a</span>,array(4,5,6));<br>
$<span style="color: #cd853f">a</span> = array_merge($<span style="color: #cd853f">a</span>,array(4,5,6));</td>
<td><span style="color: teal">@a</span> = (1,2,3);<br>
<span style="color: teal">@b</span> = (<span style="color: teal">@a</span>,(4,5,6));<br>
<span style="color: green">push</span> <span style="color: teal">@a</span>, (4,5,6);</td>
<td><span style="color: #cd853f">a</span> = [1,2,3]<br>
<span style="color: #cd853f">b</span> = a + [4,5,6]<br>
a.extend([4,5,6])</td>
<td>a = [1,2,3]<br>
b = a + [4,5,6]<br>
a.concat([4,5,6])</td>
</tr>
<tr>
<td><a href="#array-copy">address copy, shallow copy, deep copy</a></td>
<td>$<span style="color: #cd853f">a</span> = (1,2,array(3,4));<br>
$<span style="color: #cd853f">b</span> =&amp; $<span style="color: #cd853f">a</span>;<br>
<span style="color: gray"><em>none</em></span><br>
$<span style="color: #cd853f">d</span> = $<span style="color: #cd853f">a</span>;</td>
<td><span style="color: teal">@a</span> = (1,2,[3,4]);<br>
$b = \<span style="color: teal">@a</span>;<br>
<span style="color: teal">@c</span> = <span style="color: teal">@a</span>;<br>
<span style="color: gray"><em>none</em></span></td>
<td><span style="color: #cd853f">a</span> = [1,2,[3,4]]<br>
<span style="color: #cd853f">b</span> = a<br>
<span style="color: #cd853f">c</span> = <span style="color: purple">list</span>(a)<br>
<span style="color: purple">import</span> copy<br>
<span style="color: #cd853f">d</span> = copy.deepcopy(a)</td>
<td>a = [1,2,[3,4]]<br>
b = a<br>
c = a.dup<br>
d = <span style="color: green">Marshal</span>.load(<span style="color: green">Marshal</span>.dump(a))</td>
</tr>
<tr>
<td><a href="#array-arguments">arrays as function arguments</a></td>
<td><span style="color: gray"><em>parameter contains deep copy</em></span></td>
<td><span style="color: gray"><em>each element passed as separate argument; use reference to pass array as single argument</em></span></td>
<td><span style="color: gray"><em>parameter contains address copy</em></span></td>
<td><span style="color: gray"><em>parameter contains address copy</em></span></td>
</tr>
<tr>
<td><a href="#array-iteration">array iteration</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">foreach</span> (array(1,2,3) <span style="color: purple">as</span> $<span style="color: #cd853f">i</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"$i\n"</span>;<br>
}</td>
<td><span style="color: purple">for</span> <span style="color: #cd853f">$i</span> (1&nbsp;2&nbsp;3) { <span style="color: green">print</span> <span style="color: maroon">"$i\n"</span> }</td>
<td><span style="color: purple">for</span> i <span style="color: purple">in</span> [1,2,3]:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(i)</td>
<td>[1,2,3].each { |i| puts i }</td>
</tr>
<tr>
<td><a href="#indexed-array-iteration">indexed array iteration</a></td>
<td>$<span style="color: #cd853f">a</span> = array(<span style="color: maroon">'a'</span>,<span style="color: maroon">'b'</span>,<span style="color: maroon">'c'</span>);<br>
<span style="color: purple">foreach</span> ($<span style="color: #cd853f">a</span> as $<span style="color: #cd853f">i</span> =&gt; $<span style="color: #cd853f">c</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"$c at index $i\n"</span>;<br>
}</td>
<td><span style="color: teal">@a</span> = (<span style="color: maroon">'a'</span>,<span style="color: maroon">'b'</span>,<span style="color: maroon">'c'</span>);<br>
<span style="color: purple">for</span> ($i=0; $i&lt;<span style="color: green">scalar</span>(<span style="color: teal">@a</span>); $i++) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"$a[$i] at index $i\n"</span>;<br>
};</td>
<td><span style="color: purple">for</span> i, c <span style="color: purple">in</span> enumerate([<span style="color: maroon">'a'</span>,<span style="color: maroon">'b'</span>,<span style="color: maroon">'c'</span>]):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: maroon">"%s at index %d"</span> % (c, i))</td>
<td>a = [<span style="color: maroon">'a'</span>,<span style="color: maroon">'b'</span>,<span style="color: maroon">'c'</span>]<br>
a.each_with_index do |c,i|<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts <span style="color: maroon">"</span><span style="color: #cd853f">#{c}</span> <span style="color: maroon">at index</span> <span style="color: #cd853f">#{i}</span><span style="color: maroon">"</span><br>
end</td>
</tr>
<tr>
<td><a href="#array-sort">sort</a></td>
<td>$<span style="color: #cd853f">a</span> = array(3,1,4,2);<br>
<span style="color: gray"><em>none</em></span><br>
sort($<span style="color: #cd853f">a</span>);</td>
<td><span style="color: teal">@a</span> = (3,1,4,2);<br>
<span style="color: green">sort</span> <span style="color: teal">@a</span>;<br>
<span style="color: teal">@a</span> = <span style="color: green">sort</span> <span style="color: teal">@a</span>;<br>
<span style="color: green">sort</span> { $a &lt;=&gt; $b } <span style="color: teal">@a</span>;</td>
<td><span style="color: #cd853f">a</span> = [3,1,4,2]<br>
<span style="color: purple">sorted</span>(a)<br>
a.sort()</td>
<td>a = [3,1,4,2]<br>
a.sort<br>
a.sort!<br>
a.sort { |m,n| m &lt;=&gt; n}</td>
</tr>
<tr>
<td><a href="#array-reverse">reverse</a></td>
<td>$<span style="color: #cd853f">a</span> = array(1,2,3);<br>
array_reverse($<span style="color: #cd853f">a</span>);<br>
$<span style="color: #cd853f">a</span> = array_reverse($<span style="color: #cd853f">a</span>);</td>
<td><span style="color: teal">@a</span> = (1,2,3);<br>
<span style="color: green">reverse</span> <span style="color: teal">@a</span>;<br>
<span style="color: teal">@a</span> = <span style="color: green">reverse</span> <span style="color: teal">@a</span>;</td>
<td><span style="color: #cd853f">a</span> = [1,2,3]<br>
<span style="color: purple">list</span>(<span style="color: purple">reversed</span>([1,2,3]))<br>
a.reverse()</td>
<td>a = [1,2,3]<br>
a.reverse<br>
a.reverse!</td>
</tr>
<tr>
<td><a href="#membership">membership</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>in_array(7, $<span style="color: #cd853f">nums</span>)</td>
<td><span style="color: green">grep</span> { 7 == $_ } <span style="color: teal">@nums</span></td>
<td>7 <span style="color: purple">in</span> nums</td>
<td>nums.include?(7)</td>
</tr>
<tr>
<td><a href="#intersection">intersection</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">a</span> = array(1,2);<br>
$<span style="color: #cd853f">b</span> = array(2,3,4)<br>
array_intersect($<span style="color: #cd853f">a</span>, $<span style="color: #cd853f">b</span>)</td>
<td></td>
<td><span style="color: purple">set</span>.intersection(<span style="color: purple">set</span>([1,2]),<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">set</span>([2,3,4]))</td>
<td>[1,2] &amp; [2,3,4]</td>
</tr>
<tr>
<td><a href="#union">union</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td></td>
<td><span style="color: purple">set</span>.union(<span style="color: purple">set</span>([1,2]),<span style="color: purple">set</span>([2,3,4]))</td>
<td>[1,2] | [2,3,4]</td>
</tr>
<tr>
<td><a href="#map">map</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">t2</span> = create_function(<span style="color: maroon">'$x'</span>, <span style="color: maroon">'return $x*$x;'</span>)<br>
array_map($<span style="color: #cd853f">t2</span>, array(1,2,3))</td>
<td><span style="color: green">map</span> { $_ * $_ } (1,2,3)</td>
<td><span style="color: purple">map</span>(<span style="color: purple">lambda</span> x: x * x, [1,2,3])<br>
<span style="color: #b22222"># or use list comprehension:</span><br>
[x*x for x in [1,2,3]]</td>
<td>[1,2,3].map { |o| o*o }</td>
</tr>
<tr>
<td><a href="#filter">filter</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">gt1</span> = create_function(<span style="color: maroon">'$x'</span>,<span style="color: maroon">'return $x&gt;1;'</span>);<br>
array_filter( array(1,2,3), $<span style="color: #cd853f">gt1</span>)</td>
<td><span style="color: green">grep</span> { $_ &gt; 1 } (1,2,3)</td>
<td><span style="color: purple">filter</span>(<span style="color: purple">lambda</span> x: x &gt; 1,[1,2,3])<br>
<span style="color: #b22222"># or use list comprehension:</span><br>
[x for x in [1,2,3] if x &gt; 1]</td>
<td>[1,2,3].select { |o| o &gt; 1 }</td>
</tr>
<tr>
<td><a href="#reduce">reduce</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">add</span> = create_function(<span style="color: maroon">'$a,$b'</span>,<span style="color: maroon">'return $a+$b;'</span>);<br>
array_reduce(array(1,2,3),$<span style="color: #cd853f">add</span>,0)</td>
<td>reduce { $a + $b } 0, (1,2,3)</td>
<td><span style="color: #b22222"># import needed in python 3 only</span><br>
<span style="color: purple">import reduce from</span> functools<br>
<span style="color: purple">reduce</span>(<span style="color: purple">lambda</span> x,y:x+y,[1,2,3],0)</td>
<td>[1,2,3].inject(0) { |m,o| m+o }</td>
</tr>
<tr>
<td><a href="#universal-test">universal test</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none, use array_filter</em></span></td>
<td><span style="color: gray"><em>none, use grep</em></span></td>
<td><span style="color: purple">all</span>(i%2 == 0 <span style="color: purple">for</span> i <span style="color: purple">in</span> [1,2,3,4])</td>
<td>[1,2,3,4].all? {|i| i.even? }</td>
</tr>
<tr>
<td><a href="#existential-test">existential test</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none, use array_filter</em></span></td>
<td><span style="color: gray"><em>none, use grep</em></span></td>
<td><span style="color: purple">any</span>(i%2 == 0 <span style="color: purple">for</span> i <span style="color: purple">in</span> [1,2,3,4])</td>
<td>[1,2,3,4].any? {|i| i.even? }</td>
</tr>
<tr>
<td><a href="#dictionary-literal">dictionary literal</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">h</span> = array(<span style="color: maroon">'t'</span> =&gt; 1, <span style="color: maroon">'f'</span> =&gt; 0);</td>
<td><span style="color: teal">%h</span> = ( <span style="color: maroon">'t'</span> =&gt; 1, <span style="color: maroon">'f'</span> =&gt; 0 );</td>
<td><span style="color: #cd853f">h</span> = { <span style="color: maroon">'t'</span>:1, <span style="color: maroon">'f'</span>:0 }</td>
<td>h = { <span style="color: maroon">'t'</span> =&gt; 1, <span style="color: maroon">'f'</span> =&gt; 0 }</td>
</tr>
<tr>
<td><a href="#dictionary-size">dictionary size</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>count($<span style="color: #cd853f">h</span>)</td>
<td><span style="color: green">scalar</span>(<span style="color: green">keys</span> <span style="color: teal">%h</span>)</td>
<td><span style="color: purple">len</span>(h)</td>
<td>h.size<br>
h.length <span style="color: #b22222"># same as size</span></td>
</tr>
<tr>
<td><a href="#dictionary-lookup">dictionary lookup</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">h</span>[<span style="color: maroon">'t'</span>]</td>
<td><span style="color: teal">$h</span>{<span style="color: maroon">'t'</span>}</td>
<td>h[<span style="color: maroon">'t'</span>]</td>
<td>h[<span style="color: maroon">'t'</span>]</td>
</tr>
<tr>
<td><a href="#dictionary-key-check">is dictionary key present</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>array_key_exists(<span style="color: maroon">'y'</span>,$<span style="color: #cd853f">h</span>);</td>
<td><span style="color: green">defined</span>(<span style="color: teal">$h</span>{<span style="color: maroon">'y'</span>})</td>
<td><span style="color: maroon">'y'</span> <span style="color: purple">in</span> h</td>
<td>h.has_key?(<span style="color: maroon">'y'</span>)</td>
</tr>
<tr>
<td><a href="#dictionary-delete">delete dictionary entry</a></td>
<td>$<span style="color: #cd853f">h</span> = array(1 =&gt; <span style="color: maroon">'t'</span>, 0 =&gt; <span style="color: maroon">'f'</span>);<br>
unset($<span style="color: #cd853f">h</span>[1]);</td>
<td><span style="color: teal">%h</span> = ( 1 =&gt; <span style="color: maroon">'t'</span>, 0 =&gt; <span style="color: maroon">'f'</span> );<br>
<span style="color: green">delete</span> <span style="color: teal">$h</span>{1};</td>
<td><span style="color: #cd853f">h</span> = {1: <span style="color: purple">True</span>, 0: <span style="color: purple">False</span>}<br>
<span style="color: purple">del</span> h[1]</td>
<td>h = {1 =&gt; <span style="color: #cd853f">true</span>, 0 =&gt; <span style="color: #cd853f">false</span>}<br>
h.delete(1)</td>
</tr>
<tr>
<td><a href="#dictionary-iteration">dictionary iteration</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">foreach</span> ($<span style="color: #cd853f">h</span> as $<span style="color: #cd853f">k</span> =&gt; $<span style="color: #cd853f">v</span> ) {</td>
<td><span style="color: purple">while</span> ( ($k, $v) = <span style="color: green">each</span> <span style="color: teal">%h</span> ) {</td>
<td><span style="color: #b22222"># python 2:</span><br>
<span style="color: purple">for</span> k,v <span style="color: purple">in</span> h.iteritems():<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: gray"><em>code</em></span><br>
<span style="color: #b22222"># python 3:</span><br>
<span style="color: purple">for</span> k,v <span style="color: purple">in</span> h.items():<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: gray"><em>code</em></span></td>
<td>h.each { |k,v| <span style="color: gray"><em>code</em></span> }</td>
</tr>
<tr>
<td><a href="#dictionary-keys-values">keys and values of dictionary as arrays</a></td>
<td>array_keys($<span style="color: #cd853f">h</span>)<br>
array_values($<span style="color: #cd853f">h</span>)</td>
<td><span style="color: green">keys</span> <span style="color: teal">%h</span><br>
<span style="color: green">values</span> <span style="color: teal">%h</span></td>
<td>h.keys()<br>
h.values()</td>
<td>h.keys<br>
h.values</td>
</tr>
<tr>
<td><a href="#out-of-bounds">out of bounds behavior</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: teal">NULL</span></td>
<td><span style="color: green">undef</span></td>
<td><span style="color: gray"><em>raises</em> IndexError <em>or</em> KeyError</span></td>
<td><span style="color: #cd853f">nil</span></td>
</tr>
<tr>
<th colspan="5"><a name="functions"></a><a href="#functions-notes">functions</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#function-declaration">function declaration</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">add</span>($<span style="color: #cd853f">a</span>, $<span style="color: #cd853f">b</span>) { <span style="color: purple">return</span> $<span style="color: #cd853f">a</span> + $<span style="color: #cd853f">b</span>; }</td>
<td><span style="color: purple">sub</span> <span style="color: #0000cd">add</span> { <span style="color: teal">$_</span>[0] + <span style="color: teal">$_</span>[1] }</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">add</span>(a,b): <span style="color: purple">return</span> a+b</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">add</span>(a,b); a+b; <span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#function-invocation">function invocation</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>add(3,7);</td>
<td>add(1,2);</td>
<td>add(1,2)</td>
<td>add(1,2)</td>
</tr>
<tr>
<td><a href="#missing-argument">missing argument</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>set to</em> NULL <em>with warning</em></span></td>
<td><span style="color: gray"><em>set to</em> undef</span></td>
<td><span style="color: gray"><em>raises</em> TypeError</span></td>
<td><span style="color: gray"><em>raises</em> ArgumentError</span></td>
</tr>
<tr>
<td><a href="#default-argument">default value</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">my_log</span>($<span style="color: #cd853f">x</span>, $<span style="color: #cd853f">b</span>=10) {</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">log</span>(x,base=10):</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">log</span>(x,base=10)</td>
</tr>
<tr>
<td><a href="#variable-arguments">arbitrary number of arguments</a></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">add</span>() { <span style="color: purple">return</span> array_sum(func_get_args()); }</td>
<td><span style="color: gray">@_ <em>contains all values</em></span></td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">add</span>(first,*rest):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">if not</span> rest:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> first<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">else</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> first+add(*rest)</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">add</span>(first, *rest)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">if</span> rest.empty?<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>first<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">else</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>first + add(*rest)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#named-parameters">named parameter definition</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">f</span>(**d):</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">f</span>(h)</td>
</tr>
<tr>
<td><a href="#named-parameters">named parameter invocation</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>f(eps=0.01)</td>
<td>f(<span style="color: teal">:eps</span> =&gt; 0.01)</td>
</tr>
<tr>
<td><a href="#pass-number-string-by-reference">pass number or string by reference</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">foo</span>(&amp;$<span style="color: #cd853f">x</span>, &amp;$<span style="color: #cd853f">y</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">x</span> += 1;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">y</span> .= <span style="color: maroon">'ly'</span>;<br>
}<br>
<br>
$<span style="color: #cd853f">n</span> = 7;<br>
$<span style="color: #cd853f">s</span> = 'hard';<br>
foo($<span style="color: #cd853f">n</span>, $<span style="color: #cd853f">s</span>);</td>
<td><span style="color: purple">sub</span> <span style="color: #0000cd">foo</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">$_</span>[0] += 1;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">$_</span>[1] .= <span style="color: maroon">'ly'</span>;<br>
}<br>
<br>
<span style="color: purple">my</span> <span style="color: #cd853f">$n</span> = 7;<br>
<span style="color: purple">my</span> <span style="color: #cd853f">$s</span> = <span style="color: maroon">'hard'</span>;<br>
foo($n, $s);</td>
<td><span style="color: gray"><em>not possible</em></span></td>
<td><span style="color: gray"><em>not possible</em></span></td>
</tr>
<tr>
<td><a href="#pass-array-hash-by-reference">pass array or hash by reference</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">foo</span>(&amp;$<span style="color: #cd853f">x</span>, &amp;$<span style="color: #cd853f">y</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">x</span>[2] = 5;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">y</span>[<span style="color: maroon">'f'</span>] = -1;<br>
}<br>
<br>
$<span style="color: #cd853f">a</span> = array(1,2,3);<br>
$<span style="color: #cd853f">h</span> = array(<span style="color: maroon">'t'</span>=&gt;1,<span style="color: maroon">'f'</span>=&gt;0);<br>
foo($<span style="color: #cd853f">a</span>, $<span style="color: #cd853f">h</span>);</td>
<td><span style="color: purple">sub</span> <span style="color: #0000cd">foo</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">$_</span>[0][2] = 5;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">$_</span>[1]{<span style="color: maroon">'f'</span>} = -1;<br>
}<br>
<br>
<span style="color: purple">my</span> <span style="color: teal">@a</span> = (1,2,3);<br>
<span style="color: purple">my</span> <span style="color: teal">%h</span> = (<span style="color: maroon">'t'</span>=&gt; 1, <span style="color: maroon">'f'</span> =&gt; 0);<br>
foo(\<span style="color: teal">@a</span>, \<span style="color: teal">%h</span>);</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">foo</span>(x, y):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>x[2] = 5<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>y[<span style="color: maroon">'f'</span>] = -1<br>
<br>
<span style="color: #cd853f">a</span> = [1,2,3]<br>
<span style="color: #cd853f">h</span> = {<span style="color: maroon">'t'</span>:1, <span style="color: maroon">'f'</span>:0}<br>
foo(a, h)</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">foo</span>(x, y)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>x[2] = 5<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>y[<span style="color: maroon">'f'</span>] = -1<br>
end<br>
<br>
a = [1,2,3]<br>
h = {<span style="color: maroon">'t'</span>=&gt; 1, <span style="color: maroon">'f'</span> =&gt; 0 }<br>
foo(a, h)</td>
</tr>
<tr>
<td><a href="#return-value">return value</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray">return <em>arg or</em> NULL</span></td>
<td><span style="color: gray">return <em>arg or last expression evaluated</em></span></td>
<td><span style="color: gray">return <em>arg or</em> None</span></td>
<td><span style="color: gray">return <em>arg or last expression evaluated</em></span></td>
</tr>
<tr>
<td><a href="#multiple-return">multiple return values</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">first_and_second</span>(&amp;$<span style="color: #cd853f">a</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> array($<span style="color: #cd853f">a</span>[0], $<span style="color: #cd853f">a</span>[1]);<br>
}<br>
$<span style="color: #cd853f">a</span> = array(1,2,3);<br>
list($<span style="color: #cd853f">x</span>, $<span style="color: #cd853f">y</span>) =<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>first_and_second($a);</td>
<td><span style="color: purple">sub</span> <span style="color: #0000cd">first_and_second</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> (<span style="color: teal">$_</span>[0], <span style="color: teal">$_</span>[1]);<br>
}<br>
<span style="color: teal">@a</span> = (1,2,3);<br>
($x, $y) = first_and_second(<span style="color: teal">@a</span>);</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">first_and_second</span>(a):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> a[0], a[1]<br>
<br>
<span style="color: #cd853f">x</span>, <span style="color: #cd853f">y</span> = first_and_second([1,2,3])</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">first_and_second</span>(a)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> a[0], a[1]<br>
<span style="color: purple">end</span><br>
x, y = first_and_second([1,2,3])</td>
</tr>
<tr>
<td><a href="#lambda-declaration">lambda declaration</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">f</span> = create_function(<span style="color: maroon">'$x'</span>,<span style="color: maroon">'return $x*$x;'</span>);</td>
<td>$f = <span style="color: purple">sub</span> { <span style="color: teal">$_</span>[0] * <span style="color: teal">$_</span>[0] }</td>
<td><span style="color: #cd853f">f</span> = <span style="color: purple">lambda</span> x: x * x</td>
<td>f = lambda { |x| x * x }</td>
</tr>
<tr>
<td><a href="#lambda-invocation">lambda invocation</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">f</span>(2)</td>
<td>$f-&gt;(2)</td>
<td>f(2)</td>
<td>f.call(2)</td>
</tr>
<tr>
<td><a href="#private-state-function">function with private state</a></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">counter</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">static</span> $<span style="color: #cd853f">i</span> = 0;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> ++$<span style="color: #cd853f">i</span>;<br>
}<br>
<span style="color: purple">echo</span> counter();</td>
<td>{<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$i</span> = 0;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">sub</span> <span style="color: #0000cd">counter</span>() { ++$i }<br>
}<br>
<span style="color: green">print</span> counter() . "\n";</td>
<td><span style="color: #b22222"># state not private:</span><br>
<span style="color: purple">def</span> <span style="color: #0000cd">counter</span>():<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>counter.i += 1<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> counter.i<br>
<br>
counter.i = 0<br>
<span style="color: purple">print</span>(counter())</td>
<td><span style="color: gray"><em>none</em></span></td>
</tr>
<tr>
<td><a href="#closure">closure</a></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">make_counter</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">i</span> = 0;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> function () use (&amp;$<span style="color: #cd853f">i</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> ++$<span style="color: #cd853f">i</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>};<br>
}<br>
$<span style="color: #cd853f">nays</span> = make_counter();<br>
<span style="color: purple">echo</span> $<span style="color: #cd853f">nays</span>();</td>
<td><span style="color: purple">sub</span> <span style="color: #0000cd">make_counter</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$i</span> = 0;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> <span style="color: purple">sub</span>() { ++$i };<br>
}<br>
<span style="color: purple">my</span> <span style="color: #cd853f">$nays</span> = make_counter();<br>
<span style="color: green">print</span> $nays-&gt;() . <span style="color: maroon">"\n"</span></td>
<td><span style="color: #b22222"># python 3:</span><br>
<span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span>():<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i = 0<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> <span style="color: #0000cd">counter</span>():<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>nonlocal i<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i += 1<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> i<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> counter<br>
<br>
nays = make_counter()</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span>()<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i = 0<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> lambda { i +=1; i }<br>
<span style="color: purple">end</span><br>
nays = make_counter<br>
puts nays.call</td>
</tr>
<tr>
<td><a href="#generator">generator</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span>():<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i = 0<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">while True</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i += 1<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">yield</span>(i)<br>
<span style="color: #cd853f">nays</span> = make_counter()<br>
<span style="color: purple">print</span>(nays.next())</td>
<td><span style="color: #b22222"># ruby 1.9:</span><br>
<span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span>()<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> <span style="color: green">Fiber</span>.new <span style="color: purple">do</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i = 0<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">while</span> <span style="color: #cd853f">true</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i += 1<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">Fiber</span>.yield i<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="color: purple">end</span><br>
nays = make_counter<br>
puts nays.resume</td>
</tr>
<tr>
<th colspan="5"><a name="execution-control"></a><a href="#execution-control-notes">execution control</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#if">if</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">if</span> ( 0 == $<span style="color: #cd853f">n</span> ) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"no hits\n"</span>;<br>
} <span style="color: purple">elseif</span> ( 1 == $<span style="color: #cd853f">n</span> ) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"one hit\n"</span>;<br>
} <span style="color: purple">else</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"$n hits\n"</span>;<br>
}</td>
<td><span style="color: purple">if</span> ( 0 == $n ) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"no hits\n"</span><br>
} <span style="color: purple">elsif</span> ( 1 == $n ) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"1 hit\n"</span><br>
} <span style="color: purple">else</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"$n hits\n"</span><br>
}</td>
<td><span style="color: purple">if</span> 0 == n:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: maroon">"no hits"</span>)<br>
<span style="color: purple">elif</span> 1 == n:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: maroon">"1 hit"</span>)<br>
<span style="color: purple">else</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: purple">str</span>(n) + <span style="color: maroon">" hits"</span>)</td>
<td><span style="color: purple">if</span> n == 0<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts <span style="color: maroon">"no hits"</span><br>
<span style="color: purple">elsif</span> 1 == n<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts <span style="color: maroon">"1 hit"</span><br>
<span style="color: purple">else</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts <span style="color: maroon">"</span><span style="color: #cd853f">#{n}</span> <span style="color: maroon">hits"</span><br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#while">while</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">while</span> ( $<span style="color: #cd853f">i</span> &lt; 100 ) { $<span style="color: #cd853f">i</span>++; }</td>
<td><span style="color: purple">while</span> ( $i &lt; 100 ) { $i++ }</td>
<td><span style="color: purple">while</span> i &lt; 100:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i += 1</td>
<td><span style="color: purple">while</span> i &lt; 100 <span style="color: purple">do</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>i += 1<br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#break-continue">break/continue/redo</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">break continue</span> <span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">last next redo</span></td>
<td><span style="color: purple">break continue</span> <span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">break next redo</span></td>
</tr>
<tr>
<td><a href="#for">for</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">for</span> ($<span style="color: #cd853f">i</span> = 1; $<span style="color: #cd853f">i</span> &lt;= 10; $<span style="color: #cd853f">i</span>++) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"$i\n"</span>;<br>
}</td>
<td><span style="color: purple">for</span> ( $i=0; $i &lt;= 10; $i++ ) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"$i\n"</span>;<br>
}</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr>
<tr>
<td><a href="#range-iteration">range iteration</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">foreach</span> (range(1,10) <span style="color: purple">as</span> $<span style="color: #cd853f">i</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"$i\n"</span>;<br>
}</td>
<td><span style="color: purple">for</span> <span style="color: #cd853f">$i</span> (1..10) { <span style="color: green">print</span> <span style="color: maroon">"$i\n"</span> }</td>
<td><span style="color: purple">for</span> i <span style="color: purple">in range</span>(1,11):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(i)</td>
<td>(1..10).each { |i| puts i }</td>
</tr>
<tr>
<td><a href="#statement-modifiers">statement modifiers</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: green">print</span> <span style="color: maroon">"positive\n"</span> <span style="color: purple">if</span> $i &gt; 0;<br>
<span style="color: green">print</span> <span style="color: maroon">"nonzero\n"</span> <span style="color: purple">unless</span> $i == 0;</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>puts <span style="color: maroon">'positive'</span> <span style="color: purple">if</span> i &gt; 0<br>
puts <span style="color: maroon">'nonzero'</span> <span style="color: purple">unless</span> i == 0</td>
</tr>
<tr>
<td><a href="#raise-exception">raise exception</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">throw new</span> <span style="color: green">Exception</span>(<span style="color: maroon">"bad arg"</span>);</td>
<td><span style="color: purple">die</span> <span style="color: maroon">"bad arg"</span>;</td>
<td><span style="color: purple">raise</span> <span style="color: green">Exception</span>(<span style="color: maroon">"bad arg"</span>)</td>
<td><span style="color: #b22222"># raises RuntimeError</span><br>
<span style="color: purple">raise</span> <span style="color: maroon">"bad arg"</span></td>
</tr>
<tr>
<td><a href="#catch-exception">catch exception</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">try</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>risky();<br>
} <span style="color: purple">catch</span> (<span style="color: green">Exception</span> $<span style="color: #cd853f">e</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">'risky failed: '</span>,<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">e</span>-&gt;getMessage(), <span style="color: maroon">"\n"</span>;<br>
}</td>
<td><span style="color: purple">eval</span> { risky };<br>
<span style="color: purple">if</span> ($@) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"risky failed: $@\n"</span>;<br>
}</td>
<td><span style="color: purple">try</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>risky()<br>
<span style="color: purple">except</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: maroon">"risky failed"</span>)</td>
<td><span style="color: #b22222"># catches StandardError</span><br>
<span style="color: purple">begin</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>risky<br>
<span style="color: purple">rescue</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>print <span style="color: maroon">"risky failed: "</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts <span style="color: #cd853f">$!</span>.message<br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#last-exception-global">global variable for last exception raised</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>$EVAL_ERROR: $@</em></span><br>
<span style="color: gray"><em>$OS_ERROR:</em> $!</span><br>
<span style="color: gray"><em>$CHILD_ERROR: $?</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>last exception:</em> $!</span><br>
<span style="color: gray"><em>backtrace array of exc.:</em> $@</span><br>
<span style="color: gray"><em>exit status of child:</em> $?</span></td>
</tr>
<tr>
<td><a href="#define-exception">define exception</a></td>
<td><span style="color: purple">class</span> <span style="color: green">Bam</span> <span style="color: purple">extends</span> <span style="color: green">Exception</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>construct</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">parent</span>::<span style="white-space: pre-wrap;">__</span>construct(<span style="color: maroon">"bam!"</span>);<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>}<br>
}</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">class</span> <span style="color: green">Bam</span>(<span style="color: green">Exception</span>):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__init__</span></span>(<span style="color: purple">self</span>):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">super</span>(Bam, <span style="color: purple">self</span>).<span style="white-space: pre-wrap;">__init__</span>(<span style="color: maroon">"bam!"</span>)</td>
<td><span style="color: purple">class</span> <span style="color: green">Bam</span> &lt; <span style="color: green">Exception</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> initialize<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">super</span>(<span style="color: maroon">"bam!"</span>)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#name-exception">catch exception by type and assign to variable</a></td>
<td><span style="color: purple">try</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">throw new</span> <span style="color: green">Bam</span>;<br>
} <span style="color: purple">catch</span> (<span style="color: green">Bam</span> $<span style="color: #cd853f">e</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> $<span style="color: #cd853f">e</span>-&gt;getMessage(), <span style="color: maroon">"\n"</span>;<br>
}</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">try</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">raise</span> Bam()<br>
<span style="color: purple">except</span> Bam <span style="color: purple">as</span> e:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(e)</td>
<td><span style="color: purple">begin</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">raise</span> <span style="color: green">Bam</span>.new<br>
<span style="color: purple">rescue</span> <span style="color: green">Bam</span> =&gt; e<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts e.message<br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#finally-ensure">finally/ensure</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">try</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>acquire_resource()<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>risky()<br>
<span style="color: purple">finally</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>release_resource()</td>
<td><span style="color: purple">begin</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>acquire_resource<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>risky<br>
<span style="color: purple">ensure</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>release_resource<br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#uncaught-exception">uncaught exception behavior</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td><span style="color: gray"><em>stderr and exit</em></span></td>
<td><span style="color: gray"><em>stderr and exit</em></span></td>
<td><span style="color: gray"><em>stderr and exit</em></span></td>
</tr>
<tr>
<td><a href="#start-thread">start thread</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">use</span> <span style="color: #0000cd">threads</span>;<br>
$f = <span style="color: purple">sub</span> { <span style="color: green">sleep</span> 10 };<br>
$t = threads-&gt;new($f);</td>
<td><span style="color: purple">class</span> <span style="color: green">sleep10</span>(threading.Thread):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> <span style="color: #0000cd">run</span>(<span style="color: purple">self</span>):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>time.sleep(10)<br>
<span style="color: #cd853f">t</span> = sleep10()<br>
t.start()</td>
<td>t = <span style="color: green">Thread</span>.new { sleep 10 }</td>
</tr>
<tr>
<td><a href="#wait-on-thread">wait on thread</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$t-&gt;<span style="color: green">join</span>;</td>
<td>t.join()</td>
<td>t.join</td>
</tr>
<tr>
<th colspan="5"><a name="environment-and-io"></a><a href="#environment-and-io-notes">environment and i/o</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#external-command">external command</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>exec(<span style="color: maroon">'ls'</span>);</td>
<td><span style="color: green">system</span>(<span style="color: maroon">'ls'</span>);</td>
<td><span style="color: purple">import</span> os<br>
os.system(<span style="color: maroon">'ls'</span>)</td>
<td>system(<span style="color: maroon">'ls'</span>)</td>
</tr>
<tr>
<td><a href="#backticks">backticks</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>exec(<span style="color: maroon">'ls'</span>, $<span style="color: #cd853f">out</span> = array());<br>
$<span style="color: #cd853f">out</span></td>
<td><span style="color: maroon"><span style="white-space: pre-wrap;">`</span>ls<span style="white-space: pre-wrap;">`</span></span>;</td>
<td><span style="color: purple">import</span> os<br>
os.popen(<span style="color: maroon">'ls'</span>).read()</td>
<td><span style="color: maroon"><span style="white-space: pre-wrap;">`</span>ls<span style="white-space: pre-wrap;">`</span></span></td>
</tr>
<tr>
<td><a href="#command-line-args">command line args, script name</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>count($<span style="color: #cd853f">argv</span>)<br>
$<span style="color: #cd853f">argv</span>[0] $<span style="color: #cd853f">argv</span>[1] <span style="color: gray"><em>…</em></span><br>
$<span style="color: teal">_SERVER</span>[<span style="color: maroon">"SCRIPT_NAME"</span>]</td>
<td><span style="color: teal">$#ARGV</span> + 1<br>
<span style="color: teal">$ARGV</span>[0] <span style="color: teal">$ARGV</span>[1] <span style="color: gray"><em>…</em></span><br>
$0</td>
<td><span style="color: purple">import</span> sys<br>
<span style="color: purple">len</span>(sys.argv)-1<br>
sys.argv[1] sys.argv[2] <span style="color: gray"><em>…</em></span><br>
sys.argv[0]</td>
<td><span style="color: green">ARGV</span>.size<br>
<span style="color: green">ARGV</span>[0] <span style="color: green">ARGV</span>[1] <span style="color: gray"><em>…</em></span><br>
<span style="color: #cd853f">$0</span></td>
</tr>
<tr>
<td><a href="#print-to-stdout">print to standard out</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">echo</span> <span style="color: maroon">"hi world\n"</span>;</td>
<td><span style="color: green">print</span> <span style="color: maroon">"hi world\n"</span>;</td>
<td><span style="color: purple">print</span>(<span style="color: maroon">"hi world"</span>)</td>
<td>puts <span style="color: maroon">"hi world"</span></td>
</tr>
<tr>
<td><a href="#standard-file-handles">standard file handles</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">stdin</span> = fopen(<span style="color: maroon"><span style="white-space: pre-wrap;">'php://stdin'</span></span>,<span style="color: maroon">'r'</span>);<br>
$<span style="color: #cd853f">stdout</span> = fopen(<span style="color: maroon"><span style="white-space: pre-wrap;">'php://stdout'</span></span>,<span style="color: maroon">'w'</span>);<br>
$<span style="color: #cd853f">stderr</span> = fopen(<span style="color: maroon"><span style="white-space: pre-wrap;">'php://stderr'</span></span>,<span style="color: maroon">'w'</span>);</td>
<td>STDIN STDOUT STDERR</td>
<td><span style="color: purple">import</span> sys<br>
sys.stdin sys.stdout sys.stderr</td>
<td><span style="color: #cd853f">$stdin $stdout $stderr</span></td>
</tr>
<tr>
<td><a href="#open-file">open file</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">f</span> = fopen(<span style="color: maroon">'/etc/hosts'</span>,<span style="color: maroon">'r'</span>);</td>
<td><span style="color: green">open</span> FILE, <span style="color: maroon">'/etc/hosts'</span>;</td>
<td><span style="color: #cd853f">f</span> = <span style="color: purple">open</span>(<span style="color: maroon">'/etc/hosts'</span>)</td>
<td>f = <span style="color: green">File</span>.open(<span style="color: maroon">'/etc/hosts'</span>) <span style="color: gray"><em>or</em></span><br>
<span style="color: green">File</span>.open(<span style="color: maroon">'/etc/hosts'</span>) { |f|</td>
</tr>
<tr>
<td><a href="#open-file-write">open file for writing</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">f</span> = fopen(<span style="color: maroon">'/tmp/php_test'</span>,<span style="color: maroon">'w'</span>);</td>
<td><span style="color: green">open</span> FILE, <span style="color: maroon">"&gt;/tmp/perl_test"</span>;</td>
<td><span style="color: #cd853f">f</span> = <span style="color: purple">open</span>(<span style="color: maroon">'/tmp/test'</span>,<span style="color: maroon">'w'</span>)</td>
<td>f = <span style="color: green">File</span>.open(<span style="color: maroon">'/tmp/test'</span>,<span style="color: maroon">'w'</span>) <span style="color: gray"><em>or</em></span><br>
<span style="color: green">File</span>.open(<span style="color: maroon">'/tmp/test'</span>,<span style="color: maroon">'w'</span>) { |f|</td>
</tr>
<tr>
<td><a href="#close-file">close file</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>fclose($<span style="color: #cd853f">f</span>);</td>
<td><span style="color: green">close</span> FILE;</td>
<td>f.close()</td>
<td>f.close</td>
</tr>
<tr>
<td><a href="#read-line">read line</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">line</span> = fgets($<span style="color: #cd853f">f</span>);</td>
<td>$line = &lt;FILE&gt;</td>
<td>f.readline()</td>
<td>f.gets</td>
</tr>
<tr>
<td><a href="#file-iterate-line">iterate over a file by line</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">while</span> (!feof($<span style="color: #cd853f">f</span>)) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">line</span> = fgets($<span style="color: #cd853f">f</span>);</td>
<td><span style="color: purple">while</span> ($line = &lt;FILE&gt;) {</td>
<td><span style="color: purple">for</span> line <span style="color: purple">in</span> f:</td>
<td>f.each <span style="color: purple">do</span> |line|</td>
</tr>
<tr>
<td><a href="#chomp">chomp</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>chop($<span style="color: #cd853f">line</span>);</td>
<td><span style="color: green">chomp</span> $line;</td>
<td><span style="color: #cd853f">line</span> = line.rstrip(<span style="color: maroon">'\r\n'</span>)</td>
<td>line.chomp!</td>
</tr>
<tr>
<td><a href="#read-file">read entire file into array or string</a></td>
<td>$<span style="color: #cd853f">a</span> = file(<span style="color: maroon">'/etc/hosts'</span>);<br>
$<span style="color: #cd853f">s</span> = file_get_contents(<span style="color: maroon">'/etc/hosts'</span>);</td>
<td><span style="color: teal">@a</span> = &lt;FILE&gt;;<br>
$/ = <span style="color: green">undef</span>;<br>
$s = &lt;FILE&gt;;</td>
<td><span style="color: #cd853f">a</span> = f.readlines()<br>
<span style="color: #cd853f">s</span> = f.read()</td>
<td>a = f.lines.to_a<br>
s = f.read</td>
</tr>
<tr>
<td><a href="#write-file">write to file</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>fwrite($<span style="color: #cd853f">f</span>, <span style="color: maroon">'hello'</span>);</td>
<td><span style="color: green">print</span> FILE <span style="color: maroon">"hello"</span>;</td>
<td>f.write(<span style="color: maroon">'hello'</span>)</td>
<td>f.write(<span style="color: maroon">'hello'</span>)</td>
</tr>
<tr>
<td><a href="#flush">flush file</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td><span style="color: purple">use</span> <span style="color: #0000cd">IO::Handle</span>;<br>
FILE-&gt;flush();</td>
<td>f.flush()</td>
<td>f.flush</td>
</tr>
<tr>
<td><a href="#environment-variable">environment variable</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>getenv(<span style="color: maroon">'HOME'</span>)</td>
<td><span style="color: teal">$ENV</span>{<span style="color: maroon">'HOME'</span>}</td>
<td><span style="color: purple">import</span> os<br>
os.getenv(<span style="color: maroon">'HOME'</span>)</td>
<td><span style="color: green">ENV</span>[<span style="color: maroon">'HOME'</span>]</td>
</tr>
<tr>
<td><a href="#exit">exit</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">exit</span> 0;</td>
<td><span style="color: purple">exit</span> 0;</td>
<td><span style="color: purple">import</span> sys<br>
sys.exit(0)</td>
<td>exit(0)</td>
</tr>
<tr>
<td><a href="#set-signal-handler">set signal handller</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td><span style="color: teal">$SIG</span>{INT} = <span style="color: purple">sub</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">die</span> <span style="color: maroon">"exiting…\n"</span>;<br>
};</td>
<td><span style="color: purple">import</span> signal<br>
<span style="color: purple">def</span> <span style="color: #0000cd">handler</span>(signo, frame):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: maroon">"exiting…"</span>)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">exit</span> -1<br>
signal.signal(signal.SIGINT, handler)</td>
<td><span style="color: green">Signal</span>.trap(<span style="color: maroon">"INT"</span>, lambda { |signo| puts <span style="color: maroon">"exiting…"</span>; exit })</td>
</tr>
<tr>
<th colspan="5"><a name="libraries-modules"></a><a href="#libraries-modules-notes">libraries and modules</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#load-library">load library</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">require_once</span>(<span style="color: maroon">'foo.php'</span>);</td>
<td><span style="color: purple">require</span> <span style="color: maroon">'Foo.pm'</span>; <span style="color: #b22222"># or</span><br>
<span style="color: purple">require</span> <span style="color: #0000cd">Foo</span>; <span style="color: #b22222"># or</span><br>
<span style="color: purple">use</span> <span style="color: #0000cd">Foo</span>;</td>
<td><span style="color: purple">import</span> foo</td>
<td>require <span style="color: maroon">'foo'</span> <span style="color: #b22222"># or</span><br>
require <span style="color: maroon">'foo.rb'</span></td>
</tr>
<tr>
<td><a href="#reload-library">reload library</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">require</span>(<span style="color: maroon">'foo.php'</span>);</td>
<td><span style="color: purple">do</span> <span style="color: maroon">'Foo.pm'</span>;</td>
<td><span style="color: purple">reload</span>(foo)</td>
<td>load <span style="color: maroon">'foo.rb'</span></td>
</tr>
<tr>
<td><a href="#library-path">library path</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">o</span> = ini_get(<span style="color: maroon">'include_path'</span>);<br>
$<span style="color: #cd853f">n</span> = $<span style="color: #cd853f">o</span> . <span style="color: maroon">':/some/path'</span>;<br>
ini_set(<span style="color: maroon">'include_path'</span>, $<span style="color: #cd853f">n</span>);</td>
<td><span style="color: green">push</span> <span style="color: teal">@INC</span>, <span style="color: maroon">'/some/path'</span>;</td>
<td><span style="color: purple">import</span> sys<br>
sys.path.append(<span style="color: maroon">'/some/path'</span>)</td>
<td><span style="color: #cd853f">$:</span> <span style="white-space: pre-wrap;">&lt;&lt;</span> <span style="color: maroon">'/some/path'</span></td>
</tr>
<tr>
<td><a href="#library-path-env">library path environment variable</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>PERL5LIB</td>
<td>PYTHONPATH</td>
<td><span style="color: green">RUBYLIB</span></td>
</tr>
<tr>
<td><a href="#library-path-command-line">library path command line option</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>-I</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>-I</td>
</tr>
<tr>
<td><a href="#module-declaration">module declaration</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>namespace Foo;</td>
<td><span style="color: purple">package</span> <span style="color: #0000cd">Foo</span>;<br>
<span style="color: purple">require</span> <span style="color: #0000cd">Exporter</span>;<br>
<span style="color: purple">our</span> <span style="color: teal">@ISA</span> = (<span style="color: maroon">"Exporter"</span>);<br>
<span style="color: purple">our</span> <span style="color: teal">@EXPORT_OK</span> = (<span style="color: maroon">'bar'</span>, <span style="color: maroon">'baz'</span>);</td>
<td><span style="color: gray"><em>put declarations in</em> foo.py</span></td>
<td><span style="color: purple">class</span> <span style="color: green">Foo</span> <span style="color: gray"><em>or</em></span> <span style="color: purple">module</span> <span style="color: green">Foo</span></td>
</tr>
<tr>
<td><a href="#submodule-declaration">submodule declaration</a></td>
<td>namespace Foo\Bar;</td>
<td><span style="color: purple">package</span> <span style="color: #0000cd">Foo::Bar</span>;</td>
<td><span style="color: gray"><em>create directory</em> foo <em>in library path containing file</em> bar.py</span></td>
<td><span style="color: purple">module</span> <span style="color: green">Foo</span>::<span style="color: green">Bar</span> <span style="color: gray"><em>or</em></span><br>
<span style="color: purple">module</span> <span style="color: green">Foo</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">module</span> <span style="color: green">Bar</span></td>
</tr>
<tr>
<td><a href="#module-separator">module separator</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>\Foo\Bar\baz();</td>
<td>Foo::Bar::baz();</td>
<td>foo.bar.baz()</td>
<td><span style="color: green">Foo</span>::<span style="color: green">Bar</span>.baz</td>
</tr>
<tr>
<td><a href="#import-module">import module</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>none, but a long module name can be shortened</em></span></td>
<td><span style="color: #b22222"># imports symbols in @EXPORT:</span><br>
<span style="color: purple">use</span> <span style="color: #0000cd">Foo</span>;</td>
<td><span style="color: purple">from</span> foo <span style="color: purple">import</span> *</td>
<td></td>
</tr>
<tr>
<td><a href="#import-symbols">import symbols</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>only class names can be imported</em></span></td>
<td><span style="color: #b22222"># bar and baz must be in<br>
# @EXPORT or @EXPORT_OK:</span><br>
<span style="color: purple">use</span> <span style="color: #0000cd">Foo</span> (<span style="color: maroon">'bar'</span>, <span style="color: maroon">'baz'</span>);</td>
<td><span style="color: purple">from</span> foo <span style="color: purple">import</span> bar, baz</td>
<td><span style="color: gray"><em>none</em></span></td>
</tr>
<tr>
<td><a href="#package-management">package management</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$ pear list<br>
$ pear install Math_BigInteger</td>
<td>$ perldoc perllocal<br>
$ perl -MCPAN -e 'install Moose'</td>
<td>$ python<br>
<span style="white-space: pre-wrap;">&gt;&gt;&gt;</span> <span style="color: purple">help</span>(<span style="color: maroon">'modules'</span>)<br>
<span style="color: gray"><em>download pkg with matching python version</em></span><br>
$ tar xf libxml2-python-2.6.0.tar.gz<br>
$ cd libxml2-python-2.6.0<br>
$ sudo python setup.py install</td>
<td>$ gem list<br>
$ gem install rails</td>
</tr>
<tr>
<th colspan="5"><a name="objects"></a><a href="#objects-notes">objects</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#define-class">define class</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">class</span> <span style="color: green">Int</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">private</span> $<span style="color: #cd853f">value</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>construct</span>($<span style="color: #cd853f">int</span>=0) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: teal">this</span>-&gt;<span style="color: #cd853f">value</span> = $<span style="color: #cd853f">int</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>}<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">function</span> <span style="color: #0000cd">getValue</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> $<span style="color: teal">this</span>-&gt;<span style="color: #cd853f">value</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>}<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">function</span> <span style="color: #0000cd">setValue</span>($<span style="color: #cd853f">i</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: teal">this</span>-&gt;<span style="color: #cd853f">value</span> = $<span style="color: #cd853f">i</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>}<br>
}</td>
<td><span style="color: purple">package</span> <span style="color: #0000cd">Int</span>;<br>
<span style="color: purple">use</span> <span style="color: #0000cd">Moose</span>;<br>
has <span style="color: maroon">'value'</span> =&gt; ( is =&gt; <span style="color: maroon">'rw'</span> );<br>
around <span style="color: maroon">BUILDARGS</span> =&gt; <span style="color: purple">sub</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$orig</span> = <span style="color: green">shift</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$class</span> = <span style="color: green">shift</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$v</span> = <span style="color: teal">$_</span>[0] <span style="white-space: pre-wrap;">||</span> 0;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$class-&gt;$orig(<span style="color: maroon">value</span> =&gt; $v);<br>
};<br>
<span style="color: green">no</span> <span style="color: #0000cd">Moose</span>;</td>
<td><span style="color: purple">class</span> <span style="color: green">Int</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__init__</span></span>(<span style="color: purple">self</span>, v=0):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">self</span>.value = v</td>
<td><span style="color: purple">class</span> <span style="color: green">Int</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>attr_accessor <span style="color: teal">:value</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> initialize(i=0)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: #cd853f">@value</span> = i<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#create-object">create object</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">i</span> = <span style="color: purple">new</span> <span style="color: green">Int</span>();</td>
<td><span style="color: purple">my</span> <span style="color: #cd853f">$i</span> = new Int(); <span style="color: #b22222"># or</span><br>
<span style="color: purple">my</span> <span style="color: #cd853f">$i</span> = Int-&gt;new();</td>
<td><span style="color: #cd853f">i</span> = Int()</td>
<td>i = <span style="color: green">Int</span>.new</td>
</tr>
<tr>
<td><a href="#getter-setter">invoke getter, setter</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">v</span> = $<span style="color: #cd853f">i</span>-&gt;getValue();<br>
$<span style="color: #cd853f">i</span>-&gt;setValue($<span style="color: #cd853f">v</span>+1);</td>
<td><span style="color: purple">my</span> <span style="color: #cd853f">$v</span> = $i-&gt;value;<br>
$i-&gt;value($v+1);</td>
<td><span style="color: #cd853f">v</span> = i.value<br>
i.value = v+1</td>
<td>v = i.value<br>
i.value = v+1</td>
</tr>
<tr>
<td><a href="#instance-variable">instance variable accessibility</a></td>
<td><span style="color: gray"><em>must be declared</em></span></td>
<td><span style="color: gray"><em>private by default</em></span></td>
<td><span style="color: gray"><em>public; attributes starting with underscore private by convention</em></span></td>
<td><span style="color: gray"><em>private by default; use</em> attr_reader, attr_writer, attr_accessor <em>to make public</em></span></td>
</tr>
<tr>
<td><a href="#define-method">define method</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">plus</span>($<span style="color: #cd853f">i</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> $<span style="color: teal">this</span>-&gt;<span style="color: #cd853f">value</span> + $<span style="color: #cd853f">i</span>;<br>
}</td>
<td><span style="color: #b22222"># in package:</span><br>
<span style="color: purple">sub</span> <span style="color: #0000cd">plus</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$self</span> = <span style="color: green">shift</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$self-&gt;value + <span style="color: teal">$_</span>[0];<br>
}</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">plus</span>(<span style="color: purple">self</span>,v):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return self</span>.value + v</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">plus</span>(i)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>value + i<br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#invoke-method">invoke method</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">i</span>-&gt;plus(7)</td>
<td>$i-&gt;plus(7)</td>
<td>i.plus(7)</td>
<td>i.plus(7)</td>
</tr>
<tr>
<td><a href="#destructor">destructor</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>destruct</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">echo</span> <span style="color: maroon">"bye, $this-&gt;value\n"</span>;<br>
}</td>
<td><span style="color: #b22222"># in package:</span><br>
<span style="color: purple">sub</span> <span style="color: #0000cd">DEMOLISH</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$self</span> = <span style="color: green">shift</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$v</span> = $self-&gt;value;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"bye, $v\n"</span>;<br>
}</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__del__</span></span>(<span style="color: purple">self</span>):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: maroon">"bye, %"</span>, <span style="color: purple">self</span>.value)</td>
<td>val = i.value<br>
<span style="color: green">ObjectSpace</span>.define_finalizer(int) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts <span style="color: maroon">"bye,</span> <span style="color: #cd853f">#{val}</span><span style="color: maroon">"</span><br>
}</td>
</tr>
<tr>
<td><a href="#method-missing">method missing</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>call</span>($<span style="color: #cd853f">name</span>, $<span style="color: #cd853f">args</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">argc</span> = count($<span style="color: #cd853f">args</span>);<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>echo <span style="color: maroon">"no def: $name "</span> .<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: maroon">"arity: $argc\n"</span>;<br>
}</td>
<td><span style="color: #b22222"># in package:</span><br>
<span style="color: purple">our</span> <span style="color: #cd853f">$AUTOLOAD</span>;<br>
<span style="color: purple">sub</span> <span style="color: green">AUTOLOAD</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$self</span> = <span style="color: green">shift</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$argc</span> = <span style="color: green">scalar</span>(<span style="color: teal">@_</span>);<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> <span style="color: maroon">"no def: $AUTOLOAD"</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>. <span style="color: maroon">" arity: $argc\n"</span>;<br>
}</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__getattr__</span></span>(<span style="color: purple">self</span>, name):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>s = <span style="color: maroon">"no def: "</span>+name+<span style="color: maroon">" arity: %d"</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return lambda</span> *a: <span style="color: purple">print</span>(s % <span style="color: purple">len</span>(a))</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">method_missing</span>(name, *a)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts <span style="color: maroon">"no def:</span> <span style="color: #cd853f">#{name}</span><span style="color: maroon">"</span> +<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: maroon">" arity:</span> <span style="color: #cd853f">#{a.size}</span><span style="color: maroon">"</span><br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#inheritance">inheritance</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">class</span> <span style="color: green">Counter</span> <span style="color: purple">extends</span> <span style="color: green">Int</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">private static</span> $<span style="color: #cd853f">instances</span> = 0;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>construct</span>($<span style="color: #cd853f">int</span>=0) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">Counter</span>::$<span style="color: #cd853f">instances</span> += 1;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">parent</span>::<span style="white-space: pre-wrap;">__</span>construct($<span style="color: #cd853f">int</span>);<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>}<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">function</span> <span style="color: #0000cd">incr</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: #cd853f">i</span> = $<span style="color: teal">this</span>-&gt;getValue();<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$<span style="color: teal">this</span>-&gt;setValue($<span style="color: #cd853f">i</span>+1);<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>}<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">static function</span> <span style="color: #0000cd">getInstances</span>() {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">return</span> $<span style="color: #cd853f">instances</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>}<br>
}</td>
<td><span style="color: purple">package</span> <span style="color: #0000cd">Counter</span>;<br>
<span style="color: purple">use</span> <span style="color: #0000cd">Moose</span>;<br>
extends <span style="color: maroon">'Int'</span>;<br>
<span style="color: purple">my</span> <span style="color: #cd853f">$instances</span> = 0;<br>
<span style="color: purple">sub</span> <span style="color: #0000cd">BUILD</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$instances += 1;<br>
}<br>
<span style="color: purple">sub</span> <span style="color: #0000cd">incr</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$self</span> = <span style="color: green">shift</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">my</span> <span style="color: #cd853f">$v</span> = $self-&gt;value;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$self-&gt;value($v + 1);<br>
}<br>
<span style="color: purple">sub</span> <span style="color: #0000cd">instances</span> {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$instances;<br>
}<br>
<span style="color: green">no</span> <span style="color: #0000cd">Moose</span>;</td>
<td><span style="color: purple">class</span> <span style="color: green">Counter</span>(Int):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>instances = 0<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__init__</span></span>(<span style="color: purple">self</span>, v=0):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>Counter.instances += 1<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>Int.<span style="white-space: pre-wrap;">__init__</span>(<span style="color: purple">self</span>, v)<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> <span style="color: #0000cd">incr</span>(<span style="color: purple">self</span>):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">self</span>.value += 1</td>
<td><span style="color: purple">class</span> <span style="color: green">Counter</span> &lt; <span style="color: green">Int</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: #cd853f">@@instances</span> = 0<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> initialize<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: #cd853f">@@instances</span> += 1<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">super</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> incr<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: #cd853f">self</span>.value += 1<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">def</span> <span style="color: #cd853f">self</span>.instances<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: #cd853f">@@instances</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">end</span><br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#invoke-class-method">invoke class method</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: green">Counter</span>::getInstances()</td>
<td>Counter::instances();</td>
<td>Counter.instances</td>
<td><span style="color: green">Counter</span>.instances</td>
</tr>
<tr>
<th colspan="5"><a name="reflection-and-hooks"></a><a href="#reflection-and-hooks-notes">reflection and hooks</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#class">class</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>get_class($<span style="color: #cd853f">a</span>)</td>
<td><span style="color: green">ref</span> $a</td>
<td><span style="color: purple">type</span>(a)</td>
<td>a.class</td>
</tr>
<tr>
<td><a href="#has-method">has method?</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>method_exists($<span style="color: #cd853f">a</span>, <span style="color: maroon">'reverse'</span>)</td>
<td>$a-&gt;can(<span style="color: maroon">'reverse'</span>)</td>
<td><span style="color: purple">hasattr</span>(a,<span style="color: maroon">'reverse'</span>)</td>
<td>a.respond_to?(<span style="color: maroon">'reverse'</span>)</td>
</tr>
<tr>
<td><a href="#message-passing">message passing</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: purple">for</span> ($<span style="color: #cd853f">i</span> = 1; $<span style="color: #cd853f">i</span> &lt;= 10; $<span style="color: #cd853f">i</span>++) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>call_user_func(array($<span style="color: #cd853f">a</span>,<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: maroon">"phone$i"</span>), <span style="color: teal">NULL</span>);<br>
}</td>
<td><span style="color: purple">for</span> <span style="color: #cd853f">$i</span> (0..10) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$meth = <span style="color: maroon">"phone$i"</span>;<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>$a-&gt;$meth(<span style="color: green">undef</span>);<br>
}</td>
<td><span style="color: purple">for</span> i <span style="color: purple">in range</span>(1,10):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">getattr</span>(a,<span style="color: maroon">"phone"</span>+<span style="color: purple">str</span>(i))(<span style="color: teal">None</span>)</td>
<td>(1..9).each <span style="color: purple">do</span> |i|<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>a.send(<span style="color: maroon">"phone</span><span style="color: #cd853f">#{i}</span>="<span style="color: , ##cd853f">nil</span>)<br>
}</td>
</tr>
<tr>
<td><a href="#eval">eval</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td><span style="color: purple">while</span>(&lt;&gt;) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: green">print</span> ((<span style="color: purple">eval</span>), <span style="color: maroon">"\n"</span>);<br>
}</td>
<td><span style="color: purple">while True</span>:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">print</span>(<span style="color: purple">eval</span>(sys.stdin.readline()))</td>
<td>loop <span style="color: purple">do</span><br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>puts eval(gets)<br>
<span style="color: purple">end</span></td>
</tr>
<tr>
<td><a href="#methods">methods</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td>$class = <span style="color: green">ref</span>($a);<br>
<span style="color: green">keys</span> <span style="color: purple">eval</span> <span style="color: maroon">"%${class}::"</span>;</td>
<td>[m <span style="color: purple">for</span> m <span style="color: purple">in dir</span>(a) <span style="color: purple">if callable</span>(<span style="color: purple">getattr</span>(a,m))]</td>
<td>a.methods</td>
</tr>
<tr>
<td><a href="#attributes">attributes</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td><span style="color: green">keys</span> <span style="color: teal">%</span>$a;</td>
<td><span style="color: purple">dir</span>(a)</td>
<td>a.instance_variables</td>
</tr>
<tr>
<td><a href="#pretty-print">pretty print</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">h</span> = array(<span style="color: maroon">'foo'</span>=&gt;1, <span style="color: maroon">'bar'</span>=&gt;array(2,3));<br>
print_r($<span style="color: #cd853f">h</span>);</td>
<td><span style="color: purple">require</span> <span style="color: maroon">'dumpvar.pl'</span>;<br>
<span style="color: teal">%h</span> = (<span style="color: maroon">'foo'</span>=&gt;1, <span style="color: maroon">'bar'</span>=&gt;[2, 3]);<br>
dumpValue(\<span style="color: teal">%h</span>);</td>
<td><span style="color: purple">import</span> pprint<br>
<span style="color: #cd853f">h</span> = {<span style="color: maroon">'foo'</span>:1, <span style="color: maroon">'bar'</span>:[2,3] }<br>
pprint.PrettyPrinter().pprint(h)</td>
<td>require <span style="color: maroon">'pp'</span><br>
h = { <span style="color: maroon">'foo'</span>=&gt;1, <span style="color: maroon">'bar'</span>=&gt;[2,3] }<br>
pp h</td>
</tr>
<tr>
<td><a href="#source-line-file">source line number and file name</a></td>
<td><span style="color: teal"><span style="white-space: pre-wrap;">__LINE__</span><br>
<span style="white-space: pre-wrap;">__FILE__</span></span></td>
<td><span style="color: green"><span style="white-space: pre-wrap;">__LINE__</span></span><br>
<span style="color: green"><span style="white-space: pre-wrap;">__FILE__</span></span></td>
<td><span style="color: purple">import</span> inspect<br>
<span style="color: #cd853f">c</span> = inspect.currentframe()<br>
c.f_lineno<br>
c.f_code.co_filename</td>
<td><span style="white-space: pre-wrap;">__LINE__</span><br>
<span style="white-space: pre-wrap;">__FILE__</span></td>
</tr>
<tr>
<th colspan="5"><a name="web"></a><a href="#web-notes">web</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#http-get">http get</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>$<span style="color: #cd853f">h</span> = <span style="color: maroon">'<span style="white-space: pre-wrap;">http://www.google.com</span>'</span>;<br>
$<span style="color: #cd853f">ch</span> = curl_init($<span style="color: #cd853f">h</span>);<br>
curl_setopt($<span style="color: #cd853f">ch</span>,<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>CURLOPT_RETURNTRANSFER, 1);<br>
$<span style="color: #cd853f">output</span> = curl_exec($<span style="color: #cd853f">ch</span>);<br>
curl_close($<span style="color: #cd853f">ch</span>);<br>
$<span style="color: #cd853f">output</span></td>
<td><span style="color: purple">require</span> <span style="color: #0000cd">HTTP::Request</span>;<br>
<span style="color: purple">require</span> <span style="color: #0000cd">LWP::UserAgent</span>;<br>
$h = <span style="color: maroon">'<span style="white-space: pre-wrap;">http://www.google.com</span>'</span>;<br>
$r =<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>HTTP::Request-&gt;new(<span style="color: maroon">GET</span>=&gt;$h);<br>
$ua = LWP::UserAgent-&gt;new;<br>
$resp = $ua-&gt;request($r);<br>
$resp-&gt;content()</td>
<td><span style="color: puple">import</span> httplib<br>
<span style="color: #cd853f">h</span> = <span style="color: maroon">'www.google.com'</span><br>
<span style="color: #cd853f">f</span> = httplib.HTTPConnection(h)<br>
f.request(<span style="color: maroon">"GET"</span>,<span style="color: maroon">'/'</span>)<br>
f.getresponse().read()</td>
<td>require <span style="color: maroon">'net/http'</span><br>
h = <span style="color: maroon">'www.google.com'</span><br>
r = <span style="color: green">Net</span>::<span style="color: green">HTTP</span>.start(h, 80) <span style="color: purple">do</span> |f|<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>f.get(<span style="color: maroon">'/'</span>)<br>
<span style="color: purple">end</span><br>
r.body</td>
</tr>
<tr>
<td><a href="#url-encode">url encode/decode</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td>urlencode(<span style="color: maroon">"hello world"</span>);<br>
urldecode(<span style="color: maroon">"hello+world"</span>);</td>
<td><span style="color: purple">use</span> <span style="color: #0000cd">CGI</span>;<br>
CGI::escape(<span style="color: maroon">'hello world'</span>)<br>
CGI::unescape(<span style="color: maroon">'hello+world'</span>)</td>
<td><span style="color: purple">import</span> urllib<br>
urllib.quote_plus(<span style="color: maroon">"hello world"</span>)<br>
urllib.unquote_plus(<span style="color: maroon">"hello+world"</span>)</td>
<td>require <span style="color: maroon">'cgi'</span><br>
<span style="color: green">CGI</span>::escape(<span style="color: maroon">'hello world'</span>);<br>
<span style="color: green">CGI</span>::unescape(<span style="color: maroon">'hello+world'</span>);</td>
</tr>
<tr>
<td><a href="#build-xml">build xml</a></td>
<td>$<span style="color: #cd853f">x</span> = <span style="color: maroon">'&lt;a&gt;&lt;/a&gt;'</span>;<br>
$<span style="color: #cd853f">d</span> = <span style="color: purple">new</span> <span style="color: green">SimpleXMLElement</span>($<span style="color: #cd853f">x</span>);<br>
$<span style="color: #cd853f">d</span>-&gt;addChild(<span style="color: maroon">'b'</span>, <span style="color: maroon">'foo'</span>);<br>
<span style="color: purple">echo</span> $<span style="color: #cd853f">d</span>-&gt;asXML();</td>
<td></td>
<td><span style="color: #b22222"># not ported to python 3</span><br>
<span style="color: purple">from</span> xmlbuilder <span style="color: purple">import</span> XMLBuilder<br>
<span style="color: #cd853f">builder</span> = XMLBuilder()<br>
<span style="color: purple">with</span> builder.a:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">with</span> builder.b:<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>builder <span style="white-space: pre-wrap;">&lt;&lt;</span> <span style="color: maroon">"foo"</span><br>
<span style="color: purple">print</span>(<span style="color: purple">str</span>(builder))</td>
<td><span style="color: #b22222"># gem install builder</span><br>
require <span style="color: maroon">'builder'</span><br>
builder = <span style="color: green">Builder</span>::<span style="color: green">XmlMarkup</span>.new<br>
xml = builder.a <span style="color: purple">do</span> |child|<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>child.b(<span style="color: maroon">"foo"</span>)<br>
<span style="color: purple">end</span><br>
<span style="color: purple">puts</span> xml</td>
</tr>
<tr>
<td><a href="#parse-xml">parse xml</a></td>
<td>$<span style="color: #cd853f">x</span> = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt;'</span>;<br>
$<span style="color: #cd853f">d</span> = simplexml_load_string($<span style="color: #cd853f">x</span>);<br>
<span style="color: purple">foreach</span> ($<span style="color: #cd853f">d</span>-&gt;children() <span style="color: purple">as</span> $<span style="color: #cd853f">c</span>) {<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: purple">break</span>;<br>
}<br>
<span style="color: purple">echo</span> $<span style="color: #cd853f">c</span>;</td>
<td><span style="color: #b22222"># download XML::Simple from CPAN:</span><br>
<span style="color: purple">use</span> <span style="color: #0000cd">XML::Simple</span>;<br>
$xml = new XML::Simple;<br>
$s = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt;'</span>;<br>
$doc = $xml-&gt;XMLin($s);<br>
<span style="color: green">print</span> $doc-&gt;{<span style="color: maroon">'b'</span>};</td>
<td><span style="color: purple">from</span> xml.etree <span style="color: purple">import</span> ElementTree<br>
<span style="color: #cd853f">xml</span> = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt;'</span><br>
<span style="color: #cd853f">doc</span> = ElementTree.fromstring(xml)<br>
<span style="color: purple">print</span>(doc[0].text)</td>
<td>require <span style="color: maroon">'rexml/document'</span><br>
xml = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt;'</span><br>
doc = <span style="color: green">REXML</span>::<span style="color: green">Document</span>.new(xml)<br>
puts doc[0][0].text</td>
</tr>
<tr>
<td><a href="#xpath">xpath</a></td>
<td>$<span style="color: #cd853f">x</span> = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;&lt;c&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;'</span>;<br>
$<span style="color: #cd853f">d</span> = simplexml_load_string($<span style="color: #cd853f">x</span>);<br>
$<span style="color: #cd853f">n</span> = $<span style="color: #cd853f">d</span>-&gt;xpath(<span style="color: maroon">'/a/b/c'</span>);<br>
<span style="color: purple">echo</span> $<span style="color: #cd853f">n</span>[0];</td>
<td></td>
<td><span style="color: purple">from</span> xml.etree <span style="color: purple">import</span> ElementTree<br>
<span style="color: #cd853f">xml</span> = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;&lt;c&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;'</span><br>
<span style="color: #cd853f">doc</span> = ElementTree.fromstring(xml)<br>
<span style="color: #cd853f">node</span> = doc.find(<span style="color: maroon">"b/c"</span>)<br>
<span style="color: purple">print</span>(node.text)</td>
<td>require <span style="color: maroon">'rexml/document'</span><br>
include <span style="color: green">REXML</span><br>
xml = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;&lt;c&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;'</span><br>
doc = <span style="color: green">Document</span>.new(xml)<br>
node = <span style="color: green">XPath</span>.first(doc,<span style="color: maroon">'/a/b/c'</span>)<br>
puts node.text</td>
</tr>
<tr>
<td><a href="#json">json</a></td>
<td>$<span style="color: #cd853f">a</span> = array(<span style="color: maroon">'t'</span>=&gt;1, <span style="color: maroon">'f'</span>=&gt;0);<br>
$<span style="color: #cd853f">s</span> = json_encode($<span style="color: #cd853f">a</span>);<br>
$<span style="color: #cd853f">h</span> = json_decode($<span style="color: #cd853f">s</span>, <span style="color: teal">TRUE</span>);</td>
<td><span style="color: #b22222"># download JSON from CPAN:</span><br>
<span style="color: purple">use</span> <span style="color: #0000cd">JSON</span>;<br>
$raw = { <span style="color: maroon">'t'</span> =&gt; 1, <span style="color: maroon">'f'</span> =&gt; 0 };<br>
$json = JSON-&gt;new-&gt;allow_nonref;<br>
$s = $json-&gt;encode($raw);<br>
$h = $json-&gt;decode($s);</td>
<td><span style="color: purple">import</span> json<br>
<span style="color: #cd853f">s</span> = json.dumps({<span style="color: maroon">'t'</span>:1, <span style="color: maroon">'f'</span>:0})<br>
<span style="color: #cd853f">h</span> = json.loads(s)</td>
<td>require <span style="color: maroon">'json'</span><br>
s = {<span style="color: maroon">'t'</span>=&gt; 1,<span style="color: maroon">'f'</span>=&gt; 0}.to_json<br>
h = <span style="color: green">JSON</span>.parse(s)</td>
</tr>
<tr>
<th colspan="5"><a name="web-framework"></a><a href="#web-framework-notes">web framework</a></th>
</tr>
<tr>
<th></th>
<th>php</th>
<th>perl</th>
<th>python</th>
<th>ruby</th>
</tr>
<tr>
<td><a href="#web-framework">web framework</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>Django 1.2.5</em></span></td>
<td><span style="color: gray"><em>Rails 3.0.1</em></span></td>
</tr>
<tr>
<td><a href="#create-project-start-server">create project and start server</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td></td>
<td></td>
<td>$ django-admin.py startproject foo<br>
$ cd foo<br>
$ python manage.py runserver 4444<br>
$ wget localhost:4444</td>
<td>$ rails new foo -d mysql<br>
$ cd foo<br>
$ rails server -p 3333 &amp;<br>
$ wget localhost:3333</td>
</tr>
<tr>
<td><a href="#console">console</a></td>
<td></td>
<td></td>
<td>$ python manage.py shell</td>
<td>$ rails console</td>
</tr>
<tr>
<td><a href="#create-view">create view</a></td>
<td></td>
<td></td>
<td>$ python manage.py startapp bar<br>
$ cat <span style="white-space: pre-wrap;">&lt;&lt;</span>EOF &gt;bar/views.py<br>
from django.shortcuts import *<br>
def baz(request):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>data = {}<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>return render_to_response(<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>'baz.html', data)<br>
EOF<br>
$ mkdir templates<br>
$ cat <span style="white-space: pre-wrap;">&lt;&lt;</span>EOF &gt;templates/baz.html<br>
&lt;h1&gt;Baz&lt;/h1&gt;<br>
EOF<br>
<span style="color: gray"><em>in</em> urls.py <em>import</em> bar.views <em>and add this tuple to</em> patterns:</span><br>
(r'bar/baz', bar.views.baz)<br>
<span style="color: gray"><em>in</em> settings.py <em>add</em> 'bar' <em>to</em> INSTALLED_APPS. <em>Add the full pathname to the</em> templates <em>directory to</em> TEMPLATE_DIRS.</span></td>
<td>$ rails generate controller bar baz<br>
$ wget localhost:3333/bar/baz<br>
<span style="color: gray"><em>controller is method</em> baz <em>in</em><br>
app/controllers/bar_controller.rb</span><br>
$ cat <span style="white-space: pre-wrap;">&lt;&lt;</span>EOF &gt;app/views/baz/baz.html.erb<br>
&lt;h1&gt;Baz&lt;/h1&gt;<br>
EOF</td>
</tr>
<tr>
<td><a href="#url-routing-file">url routing file</a></td>
<td></td>
<td></td>
<td>urls.py</td>
<td>config/routes.rb</td>
</tr>
<tr>
<td><a href="#display-routes">display url routes</a></td>
<td></td>
<td></td>
<td></td>
<td>rake routes</td>
</tr>
<tr>
<td><a href="#routing-url-to-view">routing a url to a view</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="#route-parameeter">extract parameter from route</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="#reverse-lookup">reverse lookup</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="#database-setup">database setup</a></td>
<td></td>
<td></td>
<td>$ cat <span style="white-space: pre-wrap;">&lt;&lt;</span>EOF &gt;db.sql<br>
create database foo;<br>
EOF<br>
$ mysql &lt; db.sql</td>
<td>$ cat <span style="white-space: pre-wrap;">&lt;&lt;</span>EOF &gt;db.sql<br>
create database foo_development;<br>
create database foo_test;<br>
EOF<br>
$ mysql &lt; db.sql</td>
</tr>
<tr>
<td><a href="#database-configuration-file">db config file</a></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>settings.py</em></span></td>
<td><span style="color: gray"><em>config/database.yml</em></span></td>
</tr>
<tr>
<td><a href="#create-model">create model</a></td>
<td></td>
<td></td>
<td>$ cat <span style="white-space: pre-wrap;"> &lt;&lt;</span>EOF <span style="white-space: pre-wrap;"> &gt;&gt;</span>bar/models.py<br>
<span style="color: purple">class</span> <span style="color: green">Customer</span>(models.Model):<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>name = models.CharField(max_length=200)<br>
EOF<br>
$ python manage.py syncdb</td>
<td>$ cat <span style="white-space: pre-wrap;">&lt;&lt;</span>EOF &gt;db/customers.sql<br>
create table customers (<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>id serial,<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span>name varchar(200)<br>
);<br>
EOF<br>
$ mysql foo_development<br>
<span style="white-space: pre-wrap;">&gt;</span> source db/customers.sql<br>
<span style="white-space: pre-wrap;">&gt;</span> exit<br>
$ rails generate model customer</td>
</tr>
<tr>
<td><a href="#migration">migration</a></td>
<td></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>edit file in</em> db/migrate</span><br>
$ rake db:drop<br>
$ rake db:create<br>
$ rake db:migrate</td>
</tr>
<tr>
<td><a href="#create-row">create row</a></td>
<td></td>
<td></td>
<td><span style="color: purple">from</span> bar.models <span style="color: purple">import</span> Customer<br>
<span style="color: #cd853f">c1</span> = Customer(name=<span style="color: maroon">'Dan Foo'</span>)<br>
c1.save()</td>
<td>h1 = {<span style="color: teal">:name</span>=&gt;<span style="color: maroon">'Dan Foo'</span>}<br>
c1 = <span style="color: green">Customer</span>.create!(h1)<br>
h2 = {<span style="color: teal">:name</span>=&gt;<span style="color: maroon">'Don Bar'</span>}<br>
c2 = <span style="color: green">Customer</span>.new(h2)<br>
c2.save!</td>
</tr>
<tr>
<td><a href="#find-row">find row</a></td>
<td></td>
<td></td>
<td><span style="color: purple">from</span> bar.models <span style="color: purple">import</span> Customer<br>
<span style="color: #cd853f">c</span> = Customer.objects.get(name=<span style="color: maroon">'Dan Foo'</span>)</td>
<td>n = <span style="color: maroon">'Dan Foo'</span><br>
c = <span style="color: green">Customer</span>.find_by_name(n)<br>
c = <span style="color: green">Customer</span>.find(<span style="color: teal">:first</span>,<br>
<span style="white-space: pre-wrap;">&nbsp;&nbsp;</span><span style="color: teal">:conditions</span> =&gt; [<span style="color: maroon">'name = ?'</span>, n])</td>
</tr>
<tr>
<td><a href="#templates">templates</a><br>
<span style="white-space: pre-wrap;">&nbsp;</span></td>
<td><span style="color: gray"><em>PHP</em></span></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>ERB</em></span></td>
</tr>
<tr>
<td><a href="#template-data">making data available to templates</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">_______________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">_______________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">___________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">______________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">________________________________</span></span></th>
</tr>
</tbody></table>

<div id="page-options-area-bottom">
</div>

    						</div>
    															<div id="action-area" style="display: none"></div>
				</div>
			</div>
			
			
			
	 		<div id="footer" style="display: block; visibility: visible;">
	 					 			<div class="options" style="display: block; visibility: visible;">
			 			<a href="http://www.wikidot.com/doc" id="wikidot-help-button">Help</a>
			 			&nbsp;|
				 		<a href="http://www.wikidot.com/legal:terms-of-service" id="wikidot-tos-button">Terms of Service</a>
			 			&nbsp;|
				 		<a href="http://www.wikidot.com/legal:privacy-policy" id="wikidot-privacy-button">Privacy</a>
			 			&nbsp;|
				 		<a href="javascript:;" id="bug-report-button" onclick="WIKIDOT.page.listeners.pageBugReport(event)">Report a bug</a>
			 			&nbsp;|
				 		<a href="javascript:;" id="abuse-report-button" onclick="WIKIDOT.page.listeners.flagPageObjectionable(event)">Flag as objectionable</a>
		 			</div>
			 		Powered by <a href="http://www.wikidot.com/">Wikidot.com</a> 
		 			 		</div>
                            <div id="license-area" class="license-area">
                                            Unless otherwise stated, the
 content of this page is licensed under                                 
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike 3.0 License</a>
                </div>
                        
							

						
			
			<div id="extrac-div-1"><span></span></div><div id="extrac-div-2"><span></span></div><div id="extrac-div-3"><span></span></div>
			
									  				
  				 	</div>
	 	
	</div>
	<!-- These extra divs/spans may be used as catch-alls to add extra imagery. -->
	<div id="extra-div-1"><span></span></div><div id="extra-div-2"><span></span></div><div id="extra-div-3"><span></span></div>
	<div id="extra-div-4"><span></span></div><div id="extra-div-5"><span></span></div><div id="extra-div-6"><span></span></div>
	</div>
 	
 	 	
 	<div id="page-options-bottom-tips" style="display: none">
 		
 	</div>
 	<div id="page-options-bottom-2-tips" style="display: none">
 		
 		
 		
 		<div id="discuss-button-hovertip">
 			If you want to discuss contents of this page - this is the easiest way to do it. 		</div>
 		
 		
 		
 		
 		
 		
 			 		
	 		
	 		
	 		
	 		
 		 	</div>
 	
 	<!-- google_ad_section_end -->
 	
 	<div id="account-notifications-dummy" style="display:none"></div>
 	
 	<div style="display:none" id="dummy-ondomready-block"></div>


<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-18234656-1']);
  _gaq.push(['_setDomainName', 'none']);
  _gaq.push(['_setAllowLinker', true]);
  _gaq.push(['_trackPageview']);

  _gaq.push(['old._setAccount', 'UA-68540-5']);
  _gaq.push(['old._setDomainName', 'none']);
  _gaq.push(['old._setAllowLinker', true]);
  _gaq.push(['old._trackPageview']);
  
    _gaq.push(['userTracker._setAccount', 'UA-17129977-2']);
  _gaq.push(['userTracker._trackPageview']);
  

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>



<!-- Start Quantcast tag -->
<script type="text/javascript">
_qoptions={
    qacct:"p-edL3gsnUjJzw-"
};
(function() {
    var qc = document.createElement('script'); qc.type = 'text/javascript'; qc.async = true;
    qc.src = ('https:' == document.location.protocol ? 'https://secure' : 'http://edge') + '.quantserve.com/quant.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(qc, s);
})();
</script>
<noscript>
    <img src="http://pixel.quantserve.com/pixel/p-edL3gsnUjJzw-.gif" style="display: none;" border="0" height="1" width="1" alt="Quantcast"/>
</noscript>
<!-- End Quantcast tag -->


  

<div style="position: absolute; z-index: 100; top: 0pt; width: 100%;" id="odialog-hovertips"><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="edit-button-hovertip"><div class="content">
 			Click here to edit contents of this page. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="edit-sections-button-hovertip"><div class="content">
	 		Click here to toggle editing of individual sections of the page (if 
possible).     Watch headings for an "edit" link when available. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="edit-append-button-hovertip"><div class="content">
 			Append content without editing the whole page source. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="history-button-hovertip"><div class="content">
 			Check out how this page has evolved in the past. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="files-button-hovertip"><div class="content">
 			View and manage file attachments for this page. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="site-tools-button-hovertip"><div class="content">
 			A few useful tools to manage this Site. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="backlinks-button-hovertip"><div class="content">
 			See pages that link to and include this page. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="rename-move-button-hovertip"><div class="content">
 			Change the name (also URL address, possibly the category) of the page. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="view-source-button-hovertip"><div class="content">
 			View wiki source for this page without editing. 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="parent-page-button-hovertip"><div class="content">	
 			View/set parent page (used for creating breadcrumbs and structured layout). 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="abuse-report-button-hovertip"><div class="content">
	 			Notify administrators if there is objectionable content in this page.	 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="bug-report-button-hovertip"><div class="content">
				Something does not work as expected? Find out what you can do.	 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="wikidot-help-button-hovertip"><div class="content">
	 			General Wikidot.com documentation and help section.	 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="wikidot-tos-button-hovertip"><div class="content">
	 			Wikidot.com Terms of Service - what you can, what you should not etc.	 		</div></div><div style="visibility: visible; opacity: 0.9999; position: absolute; display: none; border: 1px solid black;" class="hovertip " id="wikidot-privacy-button-hovertip"><div class="content">
	 			Wikidot.com Privacy Policy. 			
	 		</div></div></div></body></html>